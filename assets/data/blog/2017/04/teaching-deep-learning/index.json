{"hash":"44b294a82636ab2865b41f0ee5688fbb77258a12","data":{"blogPost":{"id":"1beab0977bc124455ec5ba3953ba5ba2","title":"Learning Deep Learning with Keras","description":"Don't be afraid of artificial neural networks - it is easy to start! An overview of deep learning with links to didactic materials.","path":"/blog/2017/04/teaching-deep-learning/","content":"<p>I teach deep learning both for a living (as the main <a href=\"http://deepsense.ai/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">deepsense.ai instructor</a>, in a Kaggle-winning team[^deepsense]) and as a part of my volunteering with the <a href=\"http://crastina.se/gifted-children-in-poland-by-piotr-migdal/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Polish Children's Fund</a> giving workshops to gifted high-school students[^trypophobia]. I want to share a few things I've learnt about teaching (and learning) deep learning.</p>\n<p>Whether you want to start learning deep learning for you career, to have a nice adventure (e.g. with <a href=\"https://www.reddit.com/r/MachineLearning/comments/4casci/can_i_hug_that_i_trained_a_classifier_to_tell_you/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">detecting huggable objects</a>) or to get insight into machines before they take over[^webcomics], this post is for you! Its goal is not to teach neural networks by itself, but to provide an overview and to point to didactically useful resources.</p>\n<p><figure class=\"md-figure-block\"><img class=\"g-image g-image--lazy g-image--loading md-figure-image\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1032 724' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-80d1332f325583ab1033b1bb94a463fb'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-80d1332f325583ab1033b1bb94a463fb)' width='1032' height='724' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAtCAYAAAAeA21aAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAZJUlEQVRo3t2aB3Qb55XvJbFIIiV2EiwgSAAECBIkABIECJAA2MDeC9jFXsVOFTaJlEQVU7YkO5Ity3GJHctJXFIct%2bRls1nbsd/aOdm8l13HKZvykvO8u3EcJ3FsWU7yex%2bGomQ59sabssfn4Zx7ZubDzDdz73fL//5nNm3atImPmvj4%2bPx33u%2bvM9GWLVukbVVVFRMTE8TFxREaGkpAQAARERFERUURGRlJUFAQTqdTOlcmk7Fjxw5CQkKk/xUKBdHR0WRlZZGUlCRdFxYWhlwu/%2bgbYGPVZmZm2Lt3L/feey8XLlyQ5I477uDkyZOcO3cOrVbL6OgofX193H///SwuLvKJT3yC5eVlDh06xNmzZ6Xt7bffzvHjx6X/RkZGrjPyR9IAmzdvlralpaV0d3eTl5dHS0sLdXV11NTUcOzYMXp7e9m%2bfTu7du2iubmZ2tpaaTs8PIzVasVkMlFYWIjH46GkpESSixcv0tXVdd09PpIG%2bFMSHx//Z11nNBpRqVQf/RB4rzdsuOu7V827vyGbroy///Gm68b%2bW5PgxgP7%2bmzB13c9rn19fcX4n46/zULpD%2bumm70xfd2cm6/J5r92rG/%2bzw2wQ2kgMMnKDrUZpauCMKODeGs%2bcrMLWWoWWYVFBASF4rt1O6ExCSQYszDk5JBXUYQp34XBbsNSXITGZGRHRLQ4N1iaPCIuiKTMBEk0ZgVqQzwKXQyRilB04jjNokNpkKNOjyMhcScqbTiJqXHEpymJVkUQpxSikLFzZ4A0X3hYCBVlLprqi/HUldLZWkF9tZPmunJaG8rpba9hV2s13fUVdNSWMtjdSL5Vj02fRGOVm9qKfGrL8ygtzsFo0G0s1ibC7LUoy3pIqemjeGCSpv1LWAb3kJhXQ/XgbrKLiwmOURAhlFcZcyjq6MMz2Ef/wiyOwWEs5eWojSZiRKxGKFRsE8byzqtzWbA32MhwqbEWZWKtycBeaya/LRdbTx3V/SVUtdjJcCjRtbaRMrpESlMT5qJUHMVZ6O1J6DPUxMljpfnUKjnz%2b/o5MNfP2pFpbjw8ybHFIWn/zA17OHtygVvWDnPq4Cw3Lc9waGGIYksyRfoEhtvrOLowwux4K/umBqipKrrmAdsMRcSUdGH0DJHe0IutuYf8oSnkxR4MxXUk25yEq/RExmuwFdWjySlFa7WRaLIQYysgxmghJDaB4DglO2VxbA2JkCZPsShwVKdgKkwh3aLFXZtJz1At1R1OKruKaN1lI68%2bD%2buFL6N9EDQX3yHp3jeRj17AXJhOZk4KaalpKBOU0nwqVTxL8yMs7BticbaPQ/uHOLY8xfED4xxbGmdt5QArc/uZm%2bxncaaPLuEhxqRYXClKXMZUZkc7mRhqZq%2boOnU1xesG2LzFh5i8etI6ZlE1jGJsGaZsfI6q6QPUT89R0DuOymRHqbfiLK6nZdc4JS0dVDWL8uapJr%2bkQLh2BvF6E3HaNGI0BmSK9aydrI/H7szClJFBungAV4GNmuo8UfZa8fRVYc1VEjsjlH0a0u6/hO3Rd9Dd/BPC9j2HqmUAp/CWvFonZodRmi9RqWBxbpjlhVGOHBzjxMoky/uGOXFgN2sHpzh5ZIkji8PCMIMcnhvBLe4XFRqILU1NsiKS7YE7USiThCETUSbGrSfqrVv9UDcMoG6dJsrdiaa8jdzOYQqG9pHfNULLvkUs7moi5cloMpzoMvJp6B%2bkpb%2bTqtZ6ckoKRU4wI9NnESUkMtNJVIph3QBaHTk5uWRmZmIwGElO1kklTSkeIs2kJK/fQ9ZXwfTA22R86hKaM98n7uA3kPXeTWV3Bx2DTqwuA3qr9qoHHFwQCi6NctPxPawdnuLo4ihn1vZw/swiJ5bHOHVkittPH2BisJWQ4B3iOh%2bi5Do0ukwCI/XsjMlge6SOLf471j1g21Z/DJ2TFO09Sv3%2bw2iresluHaOwd1bE/yxV/ePk13sISdAJl86nunM3heVlIubNqDPtJFnzUNrdxGblE5MjcoGnnwhnqTR5aqpY9TwXFosFszmTtDSDpHyG00BNv4Oy4ycw3/MK%2bttewXrfq6hXv0Xiyj8SUL9GfHoaY/t30zs1KvJAojRfkkrB8uIYB%2bZ3c%2bOJ/Zy5aYGTq/Pcdvok528%2byImDQ5w6Ok5FiQt/P1/pGv/twYQp7ESpnMiEhCuyCYs3ERixPuemgIBt5PbNENM0hWX8MFULN%2bCeXGHt04/y5X/6Fp7ZBWzuCiITdVS0jVDhGWBy8SD2ag%2b1fcN0j47QODxG7sgBikbmMVW2kmh2SJPr09IochcJL/BmXZMIhWT6%2bzKp2GWmZLAM%2b/ELpK4%2bj2L5n1Gd%2bBfUB18gpOtO/FLENYVWZs6cFovQhV7kEu98mqREFvcOMSfi%2b/SJOc7dtCwUnuXk4VluPbXAbTfO48g2Xldqff0DhOIOYpIKiNUUIlPnEaV2ERytXz/PX3iAuXMcmWcP/mUjhDZMo%2bk9wJ1f%2bTrPvvTPODuGMDsLSEhOw%2bKqoqGpg%2b6RaTz9IhGdvZN7H7iHjz/8CIv3fZE7H3uKLOEB%2bsKqdRQnoK270I3FKipAeRaVQ/lM78vDXphGUGgQufWFmCdWie68mYTFrxHUcgb/ZDuGdBVtzaWU7WrGUmHBUmtdryrJKg7OjrC4Z0jE%2bx5uWJ7m3Kl5VkUSPH96mTmR3d%2bLZ7YGhhOXXCzyUyGxWpHsk7xGyBdVbT1MN/n4%2biGvHSKmfpKAol6iKgYweUY4ec9FRhcOoNYbiImLZ6vAAJs2%2b5CZkUllSRFGczb7V1Z45KH7eOjhB/jWz37C1C13kNU2iqXKs54DkrU4i8wUtWUxenKYobXdNM80UdFsR5UYJUqdnvreMkpE3U5yONFYdZgcCeS5k0SYmaludFHakIepIOOKB8Szum8fR5dmWDs2y3FR6m45OSe2E3zs5DzFBfYrTdM14BMYKpcM4F39WE2R5AkyVT5B0enXDBBfPUBSywyq0naSsgvQWpzE6kz4R8gJjopjZ/A6CPJmzYjIaFJSjUSLnKAzWsl2FZCVm0eJ8IzGvcvY2kcxFVdLk1ucGgb3lrBycpq7zp%2bha6qZpr311E9WU7rLQVWXlZ6VPqbX5hleGKe6q45KTwaVDWlUdTuom6qnedxDdolZmk%2bZKGd6vFfKA2uHRNY/OClywCy3iwR407H9REdFXrf63hDYEa4SlalQKJ5HtFh5mcpFpJCg6LR1A2wRMDehboiU9j3IRKaUJaUTqU7HN2AnASHhbPHbhn9gEMGivntLZlCI6OnDowmJSSQqMVUkFA2adBv2olo8E/OYG3tQCCN6J8%2bvTuPwLRPcf9et7J5qomvcTet0NZ59HnbtrWVkvomOpXZqxVjTHg9VvQVCeQMzB/rEf33UdJeR02jD4NZdaaji2DM9yNL%2bYY4dHOfGo/tYmR/jptV9or634efr%2b0dQNzhGvx73Qmlv7Eck5kpJcUdU6hUP8N9KXGknKWXtxKbZkJmKCFWmiZIRI06KE0lkGwEC3gbK5CKegvDbGiCNRcuTUGqMOITiRksBBkc5QyunyKjfJWD0ugFcAuVN3DJG%2b0Q1nRNFdE%2bX0LGvlvYjPXROldE3VkzH7mIaR0pwD7qpHC2jYsCNu8Utzu%2bgf%2b8AE0vDOBpzpfnkAhFOjHUzt2eA%2bT0jHDkwxZI45/jyAg3VJevuf13z5UOYPFOsuEOqApFKUQnUwruT89kZlXLNAFGWItQC1ZkKKoTyXg9II0KZiv%2bOEHz8/CV8v0MYZIuPHzu9HhAahVyhQZ%2beTUPbIAkCJWY4yhhfOYFOzBGdZpEmL6ktoPdgG10LNWKFq2gXBvj7F5/i2X95ntHVQQYWm5k51MHgUitDx4cYWRuWckKeM4%2bMnEzqR2qpHa4mtzFHmi82Vsb4WBczk70sihJ5%2bMAEh5fGRBKcED1ApSh9flcUX2%2bm/LbtECueLRTPEavvlFY/Mc1NVkEzQbKUP%2b4G/f39CQ4KYqvYehmejVjy7m8wPl5CIzAwED9xs40xHx9f6Xjze9xPHhOHJiWOdLsAP6ZYAWgSWT6wyG1nzzM9O0lOUQbWfCOpNi1pdh3pjhSiZIGEh4aJUNspEKYCeXKkAC%2bB6wqJ2h4THUm0LIKw0J0i5sOJCA8mKiIUWWToB3R7WyQwtC5Cny3b8BEgaIvvtmsG2FA0r6CI3eOTDPb30tbSTF5%2bvsTqdHS0097ZRXNTA25R13d1ddHU2s7k%2bCg5tmysdgfTUxNo1crrk5AwUGm5WPnWVuzZOThynVJpTEpSYRHH5WVlWM1mCovKKCt2i%2bRqoK21hRzRXZaUloqkp6KwsERk97zrlPIXCbmmroFmTyN2e44QO868fNrbWnG58gTqTJfAV2FRMWWlbpy5dgoL8iW%2bMjE%2b9oP5AO/qbhPiJSm9ZOTOnTsJDw%2bX9oODgyWi00tyeonMnTuDJNLSu79161Zpf9u2rX/Uh3sJzlzxAEbRLWYKNJieno7T4SAlRay4wUCWOQNbjgO7zSpaYiXZ2QI1ZmZgFtfFxMRgyszCkpV5Pf8oKpdNGN6rqE6XIvGMXtSZmpIswFc6seI6tVqNLkVPTq7X8Dmk6HRk23ORRUW8lyP46NHiH4bc8BW5yWucQuEd2VYLBQUFVFRWChAlDOxyCQBWgCOvgGxLJvGKRCqrqlEqYt%2bPW/wwFNem9yUlN8b/M8LSyxJtucIUeZPTu2mxDepsy7vOee/xxvXvnTdE5AlzlkV4V47kIRmi4fISsV4P0wnvMgrvMlusmIzpyONFWy68TqtR//mc4LuV/f9M/pKXIX8Babl585/i6j40%2bfpub3qvh22Qq1s%2biK/0Dk7sbhYZtJRQ0aBs376VoB3bSZBHECcLxl2Qydz%2bDvp2leCpc1GYl0Gp20JTVS4NOaJpscmYr1ezJoDNHTfv5ehCz9VWNEKuIdHgFI1IFnEas7SNT7WJ0mYmOj4JhUCdGnMxKTk1pNirSBVbfW7t1a3eO26rJDm7kvDYpL%2bNB3gtc/7sHCdWd4vsGSk9vJ%2bvD6HBgfhs2YQtO5V7717kE3fMsXpYgJWhOua68mjM1ZJvVNLrTmGkRMVNbUm88MgiX37kJrwcgwRddVaMha1obRVoreUkW8qQC/QYEyuXXnclJCaSrBdYQCBRd/ch3F3LFF%2bRgvYlHM37BRSeoaR7mUR9zhWG2u8qLvlL5Gpe2Szc%2bPTaNKdumBKlzPsub9t1FpJFhXLn%2bX3cdssUK0s9tHXUkGdKpTIjAU%2bJE7fNiE0TRb81iM8eq%2bahuxbxskzeaxU6C4a8ZqF8mWiwyoiMU%2bPns1kAqQDpXaC3FKalpghgE4U5v4HasZupGDpJSd9xmqfOsO%2bmB5g/9Smmjt9HiqX4b%2bMB/v5%2bzO/t5OBcp1gVGTsCA94VX5slb7BZUhnqLmdqqJaWpkJc%2bSWY0k1kGI24cnJw6iKpM4RwtDUFu1F5NbYTUrIxFrQJF69Fk1VMoMAMXrTpRY0JCQk0NDRQL8RoSBO9vpaqweMMrH6asRs%2bQ/%2bh%2bzl%2b95c5%2b8BXOX7nU6Rb3QTIlMyv3sgNx45wZHWVo0fXZXVVHB/5cOJ977i2tnb1ddsmP59NhMlUFNT2kqSOEau37brk5jXAtm3%2bAoevt5pKeTR6jVZ4RqxYwTSyjAZMCeEUJQUxWqrGYU2%2bisUT9XYyizpIdzahTs9luwBKXuX9Rf/hNYbNmkVrQy0r%2b2coy8/B0zvL3U/8b1YufInysdto238n5x96mvMPP0emrRCZtYb/4K/ze%2baZZ65VgeiyUxgmHpc8ICBQ4GQRI1v9fUlSxmBIU9JQ48BsSGKos5RhkQzHBkSTUi6ARpaR3ORYDPHBzBTHUmBWYbemXA0BZbqDrNJuTO5O1KLT3Cq8zYs21YnxuDLTuHVlL89/5Une/Lefsn%2b0h%2brGdp544ScMH3uQ1vl7qZ06z9yZh1m%2b9QuEy1OJFcnw2z%2bHH/3w3/j3n/%2baH/%2bfX/CvP/4Fv3njEr/73TtcvnyZd97xyjsfKJcuXZIM8OSTT25UAaHo9FfQ3P5DlLlFxIuVDo8IJz0lgWRtPNHREagSY7BmJrOrMZ8CZzodosuzpGSSlZqGKymGkvgwTrn1NFoTCAsPutqXew2QXTmItWoIg72MnTsCJJhtMaZyYKSb5x68l9//UqzpG69x1y0nWThxnls/%2bw1aFz5J%2b9InaZi5nfKBNdEi34BKl0WkuYLv/1o8/eU3ufy2UPjtt3nrrTf57RtvSIpdeustIZd46803P1De%2bM1vJAM8/vjjGwbwQbHwNSxPXsK9dw1FTBhbt11LhCEhwQLvB1w9DgsOJVNjIUPEsFOjoN2kYMGl5Nb6JBaq4q5DhSpRAh11Y6Kfn8aaVyXCR4ZOoDGtMp7GymL6m%2buY7e3gzKEFVpcPcuOFzzC29gVa9t9Dx%2bJ9NM2cF5XhMCMr9%2bAsqiTCVM6L//EGD79wFxf/8ZM88e0v8uKPX%2bS73/0uTzwl2uznnueZrz/Lm8IwvxXGeD/5tTCW9/fFxx7bqAIiIR15HvNXLjP%2b0AsS6SBxaaLZyTClkaaVoxEekKaNI0WuxKJ0kpNixKlX0JadyIFyOafb47l7TM/5EQMRwduvJkG10YWzcYq81v1kl7TjsmUJsQrPSeLcwf0cnhphb3cHj935MY4eWWP11gdZOPckjbMfp2HqNlERbhQlcIWVc5/DZMkjzFTKD1/9A5df/RmvibC59NqrvPXqz3nnl7/k0quvXpXL4vh3v3qdy6%2b9Jv33%2b1/9it%2b9/rokb//iF4hY4PFHH71iANEnxx5%2bDs3Tf6D%2bse8TLV%2bnoI1mO4M9nXjcRopFYivRqshTpKOOTcedqaHYpCJXG02FPpIWczh7CmWc9cThSg6%2b6i1eD3B5ZnF69lDSuUCRaLezhFEtwgC3zU9RnGXg1L5JvvHwJ3nmq89w92PfZP/pz9E0dY7J4/czvHwHi6cuMiPKoFJrIsZaxYvPv8x3v/h5XnryS3znyaf4v88%2byzceeYT/JRR6ScT1P31e/PeE2H7h8/z06ad5WXjGNz/3OWnce86L4tzL3/kOX/rsZ68lwdD2Y2i/CaZ7v4Y8Lp6YRB1DPf2c2dvIfJeLPa12xkqNVGcocaXGUW9Loc6qpFAfi1Udjk0VSqUumEV3JFMiGW681/fmAJdwf0fDJEW7likqrcGUomJXbTErYz005OXwD5%2b6yPOf/jh33f0Zls4%2byuyJizSOnWTp9KeYXr2TmSMX6NlzCm1qJtG2Ol7599/xzvde4rc/%2bFd%2bJRThlVd48wc/EPsv88b3vsdbYp%2bf/Yxfv/wyf/jpT7n8ox/x%2bkvi/O99Xxp7/SVxjcgFX/%2b7v7tmgK1xOrQv/h6FsLZS9PzhUTLCw0Rps%2bk5OlTAsR4by22ZLLRamChPpj03ng5nPE1WAWASQ8gSUqwNZTwvktH8KIEgNwyQS07tKI76CRy1w%2bSIXt9pMdDjqWKqp5mBugr%2b58MX%2bfb/eIRTt3%2bGwaULDMx/jNaxY0wfuo2%2b2Ruo6dpHddccOoOoIqHR9I5MMjU2yvju3ZLsHh4WUH43k2Nj0tY7NjYyIh2PjY4wPjp69b8JsfUeT09MUFlRsdFerz9s4l1fJebgzagiw4iMjr7qxu2VJg6P5tNWqGOyJp3%2bfAWerEgOteoYL4klRx1EtjKEKn0YffYwavQ7rxogQeB%2bc2k/GYUtZNnsaJRyXFYTFUUOip1WFga6eP7Bezh3y61C8bMM7T9N6%2bhh2keXaRmcp7x1DHtZJ7mVvSi0GX8bJLjZZ71khVd3ErlrDIMqltj4WIGXt0gfJtRV2lnc28Jol1uEgpkGl5qyjDgqLDF0uOTkqoKFF4RhF2Hg1gTjVHoNsA6E4pOtlDYN0tTsISPDgNHoTapKKgrtAvjYqXU7WDt8kP49J%2bkYX6Vt5CDlLeNUCMWr2saFjJFf00OpZzeaK0Srl3/0PpvPlv8C9n/3ueLZrusFrnVFfmwJk6FVxaHVCgygiSMrU4sxXY3ZpEGliCI%2bOpiw0B0kxoVcZ8VAv81E7fBFF7UdedA18kKdrGd8coLVI4eprasV8DeepEQ52oRodMo4MtO07NszQ//uPeQWN5DpKBeQtwh9Vj4ZOSVk5paQU1hDenYxQeGx/6Wv1T70F2VyRYLEp8VEy4gSAMjL7Xl5wMTEBCFKgoKCRZscRpQsRnRxcaJxiRZgJ0ICNF6OUJ2kQaGIJ0qEzfaAQFRqNaEhIe97s5CQUJTer0giIqU5vZyj934y0QxFhIdKx14U6X0WPz/fP/nw2wVeCXnXvfyu0OLvZqO8DPYGo/y%2b89Q1eJiaHKemppbmlhbKystpEg2KlwnuHRiit6dL%2bs5vYHiUttZmOjvb6RNjpWVluIsK6Ozuo69XuGlJMelpaQz091NYmH%2bVv/OuxAZ9nuNwMS08osnTTHdPj2iyMikpKaW7f4ihwX7pG8EMk0n6kNJLdV3j%2bDe/7yo3NDaJ%2b/UxOLJbNGn1pKWn42lpFd5WR2trC4MDvQyNjJJtzWZqehpVgvzP4wQ/qrJDgLUA0VvIomOEB4WJpm2b2I%2bWPDhOLicqMkL6PDfc%2b6muTCY1Y%2b%2bd4/8BWIkj8WzZzasAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1032\" alt=\"Deep Learning Meme - What I actually do (Keras version)\" data-srcset=\"/assets/static/deep_learning_meme_keras.82a2fbd.5acfc296101e82b8dca3031fb3512121.png 480w, /assets/static/deep_learning_meme_keras.6f92103.5acfc296101e82b8dca3031fb3512121.png 1032w\" data-sizes=\"(max-width: 1032px) 100vw, 1032px\" data-src=\"/assets/static/deep_learning_meme_keras.6f92103.5acfc296101e82b8dca3031fb3512121.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded md-figure-image\" src=\"/assets/static/deep_learning_meme_keras.6f92103.5acfc296101e82b8dca3031fb3512121.png\" width=\"1032\" alt=\"Deep Learning Meme - What I actually do (Keras version)\"></noscript><figcaption class=\"md-figure-caption\">Deep Learning Meme - What I actually do (Keras version)</figcaption></figure></p>\n<p>Don't be afraid of artificial neural networks - it is easy to start! In fact, my biggest regret is delaying learning it, because of the perceived difficulty.\nTo start, all you need is really basic programming, very simple mathematics and knowledge of a few machine learning concepts.\nI will explain where to start with these requirements.</p>\n<p>In my opinion, the best way to start is from a high-level interactive approach (see also: <a href=\"http://p.migdal.pl/2016/08/15/quantum-mechanics-for-high-school-students.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Quantum mechanics for high-school students</a> and my <a href=\"http://quantumgame.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Quantum Game with Photons</a>).\nFor that reason, I suggest starting with image recognition tasks in <a href=\"https://keras.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Keras</a>, a popular neural network library in Python.\nIf you like to train neural networks with less code than in Keras, the only viable option is to <a href=\"https://www.youtube.com/watch?v=flzGjnJLyS0\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">use pigeons</a>. Yes, seriously: <a href=\"http://www.sciencemag.org/news/2015/11/pigeons-spot-cancer-well-human-experts\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pigeons spot cancer as well as human experts</a>!</p>\n<h2 id=\"what-is-deep-learning-and-why-is-it-cool\"><a href=\"#what-is-deep-learning-and-why-is-it-cool\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>What is deep learning and why is it cool?</h2>\n<p><strong>Deep learning</strong> is a name for <strong>machine learning</strong> techniques using many-layered artificial <strong>neural networks</strong>. Occasionally people use the term <strong>artificial intelligence</strong>, but unless you want to sound sci-fi, it is reserved for problems that are currently considered <em>\"too hard for machines\"</em> - a frontier that keeps moving rapidly.\nThis is a field that exploded in the last few years, reaching human-level accuracy in visual recognition tasks (among many other tasks), see:</p>\n<ul>\n<li><a href=\"https://www.eff.org/ai/metrics\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Measuring the Progress of AI Research</a> by Electronic Frontier Foundation (2017)</li>\n</ul>\n<p>Unlike quantum computing, or fusion power - it is a technology that is being applied right now, not some possibility for the future.\nThere is a rule of thumb:</p>\n<blockquote>\n<p>Pretty much anything that a normal person can do in &#x3C;1 sec, we can now automate with AI. - <a href=\"https://twitter.com/andrewyng/status/788548053745569792\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Andrew Ng's tweet</a></p>\n</blockquote>\n<p>Some people go even further, <a href=\"https://lukeoakdenrayner.wordpress.com/2017/04/24/the-end-of-human-doctors-understanding-medicine/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">extrapolating that statement to experts</a>.\nIt's not a surprise that <a href=\"http://www.economist.com/news/business/21695908-silicon-valley-fights-talent-universities-struggle-hold-their\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">companies like Google and Facebook at the cutting-edge of progress</a>.\nIn fact, every few months I am blown away by something exceeding my expectations, e.g.:</p>\n<ul>\n<li><a href=\"http://karpathy.github.io/2015/05/21/rnn-effectiveness/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Unreasonable Effectiveness of Recurrent Neural Networks</a>[^unreasonable] for generating fake Shakespeare, Wikipedia entries and LaTeX articles</li>\n<li><a href=\"https://arxiv.org/abs/1508.06576\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Neural Algorithm of Artistic Style</a> style transfer (<a href=\"https://www.youtube.com/watch?v=Khuj4ASldmU\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">and for videos</a>!)</li>\n<li><a href=\"https://www.youtube.com/watch?v=ohmajJTcpNk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Real-time Face Capture and Reenactment</a></li>\n<li><a href=\"http://richzhang.github.io/colorization/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Colorful Image Colorization</a></li>\n<li><a href=\"http://www.evolvingai.org/ppgn\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Plug &#x26; Play Generative Networks</a> for photorealistic image generation</li>\n<li><a href=\"http://cs.stanford.edu/people/esteva/nature/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dermatologist-level classification of skin cancer</a> along with other medical diagnostic tools</li>\n<li><a href=\"https://phillipi.github.io/pix2pix/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Image-to-Image Translation (pix2pix)</a> - sketch to photo</li>\n<li><a href=\"https://research.googleblog.com/2017/04/teaching-machines-to-draw.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Teaching Machines to Draw</a> sketches of cats, dogs etc</li>\n</ul>\n<p>It looks like some sorcery.\nIf you are curious what neural networks are, take a look at this series of videos for a smooth introduction:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=bxe2T-V8XRs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Neural Networks Demystified</a> by Stephen Welch - video series</li>\n<li><a href=\"http://jalammar.github.io/visual-interactive-guide-basics-neural-networks/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Visual and Interactive Guide to the Basics of Neural Networks</a> by J Alammar</li>\n</ul>\n<p>These techniques are data-hungry. See a plot of <a href=\"https://stats.stackexchange.com/questions/132777/what-does-auc-stand-for-and-what-is-it\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AUC score</a> for <a href=\"https://github.com/szilard/benchm-ml/tree/master/x1-data-higgs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">logistic regression, random forest and deep learning on Higgs dataset</a> (data points are in millions):</p>\n<p><figure class=\"md-figure-block\"><img class=\"g-image g-image--lazy g-image--loading md-figure-image\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 500 300' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-dae1fc4e5d402d0c9118d90ca67d19bf'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-dae1fc4e5d402d0c9118d90ca67d19bf)' width='500' height='300' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAmCAYAAAB0xJ2ZAAAACXBIWXMAAAsSAAALEgHS3X78AAAKBElEQVRo3s1aaW8byRHVf978iHwLkk8LfwkSwAlgOHGwgLNaR77W1n2Zt3gfw7mHlCia1GFLL/Wa03RzPDxkc5EQaEz31HRP1/WquoYbSPnd39%2brZvb/35ve60N/G4uI37Lg/%2br3rXvdWGYB19fXGA6HGI1G6sr28eNH1fSYNHOc7C%2bbq/vm3Etp49FH3FzJ/I/sf2mj0aVqtzecI9fb2/VagCmA8/NzdDodeJ6nrpZlqdbtdtWV91zXVWNN1zTdJz1tLpvrevE6k7Ftd%2bF0O7C7bVSbXWRrHsoNC%2bW6jVrTRbXholL3UKkFOMqP0GhaIrTh9wlgnr/zd3FxIZuyEQSBujqOM9N4z/d9xaSms69p7M%2bf6yAIfXiuLU0Yd2y0LQ%2bleoBiNcJBfoj93BiVRohMxcNRpYvjioWdcg2vyzn8fv9nlNtNXI3G328B5mSznxSAyYgeUwDmONknPTm3K5qmtgOvj2YrRLnWQ6bcw2klwGm1jUyzgv803uLvtX/hsHWE7eYudtv72Gnt4ah9gkKngL3uPlpWS7nR2gSgr3d3d1MB0DTJhDZfzQz7bHQPc5zsk65MvjuZ74jmfduD77j48dc6nmfKotETvK0d4NfGDrYbwmTzFDvNYxy3c2h2WmIZHXlerEXm6TYIJnsjbqzFBW5ubtSG2%2b02isUiBoOBYpza7/V6qq8b7%2bl%2bFEUzY7PvBz7CKEQg/X7QU63r2cjZeWzmK/hT/hl2RZMNt4Gm25a5IUI/VM8Nogtc9gdqbuAHai3PZ/NUi3qREu54PF6PAD5//ozLy0uldTLFMfvUGpkytb%2bKC1ic5/oYhgO0BdQy7YJoeB/brV38nC%2bIuVsY9foInGCiVceduod6l2ACGdXvNd%2bh3ZK077aARZO1AMikadZJF1AbN%2bgdMfdQGCPTfzl7hnf1few1TtC0azirhyhUxGoIfJ43nZd0H67pGfTke7VbmgJ4aJI0NwqYGDAvCpgWYEYBai4Qf210W/ipuoX37SPlvz3PR70l4esskOe703X1WjqC6HXZTwPQpAUkQZB7120lATzEAkwTTLMAAl3oShhrl7FZfQPLtnAZUogWGm0b%2b4VAhTvb/qJFvZZm0rQA872a%2bXkWoJX2kCzxKwsgEOrsj2MmQquGQfouzT4rZr9VezeJAI4X%2bzGZD0VA1PLsXFOo5rppFrAIA7jX3/3wA549e4YnT57g0aNH2N7engonzRpmBEDGmbFx4UqlohZkPxkF9L1kFDgP%2bji1cmLyB%2bgFkUJuJjqD8wjHEuPb3QBRyDlf5nLdeRFk2XtJM6MAU%2bK9/X3kJYKdnJzg4OBACSotzE8FkLxBIRD9P336pMYMhck8wAQrRRPfpuYJdO/rB8r/tTt05bm9Yh%2blmmjesZQlJM14HgiaOUSSNhcEb29wK5HsXvavXUJjmjmesQAuUK/Xv5LWskyQzDGpcWWTbxq7OGx%2bUP5PECSjodfFQTHE1um56vNemvusywXuZN%2bDagWDrU0MxM1%2befECr16%2bwtOnT/H8%2bfPUjHEqgM3NTbSarRkUXSUV7rkh/lD4qxLAhaS1xAEFXpLfV%2bXwcloOcd7zp5pPQ3IzCiwTQFoUMEFwPL7C1fgGV7El8x6tmPlN8qA3FQDNfWdnB6VSKTUKpLmAww0JoG1V3yFnlZTZd2I6Ub7VEdPP%2b1%2bZcdKUvQV5wCouQMyausDdPXoDOVtEck%2bO0tw7nyGwz4sGGzoFfvz4MbLZrAIUjfzEAwINpR6G4VQDnhxhA/H7V/Vt5DslSVnPpydAXj3PxWEpkvxdToLSJxgqWkxXLV4rlPTW1TS19hca%2b0EcYUyabmFsldq0Ifwdejn8sfw3WAMHr1%2b%2bxtN/PFU8zAPCDW06%2bXx%2bqhGiOiVLsyHj%2bp4ySQKeMPRGTmV56wx9X1A8DOJkSJ4LXGSqPdRafE6EEUYIxQRd2azHtYzGe6G8w5O1vZjuh%2bxPaL6kyWqub9A4N5i0SObyneNYAOTjWlzgs7Trq6tper8wEVqWP%2bsooGK51YVLs6%2b9R6aVR2DT7DtKM/Rx1%2b4gV/WQqQkDvoMO3UTCafjhBHalDOfsDE5Zrqpfgl0%2bQ/T%2bLdzMKZxSEU6xADe%2bkuYdHyLc25F%2bWdFdmcN56lm5RrvvYTUaYu4a3O7QHwzR8S/l3li5wLKj8oYZJuYVRAhsBBweVl6K2Wc7RUReODnT02pEU34UoNr2cFz0EDZrcPM5%2bLksAmGid7AHV5j2ZNMeGYubK4gd5bPSL8OtyZxqFV6tqu67cvVFEKSzr%2bbLfTb22aJcBjYxYOoCd6hYQ/z7eCTWM8bbN6/nov/KFaHzC/FvCXXDaDDRvGR5kcR8hkCbmheXiM6KsAtFHO4KA6JNbtyp12CL5ThMegRTuszxWTeQ523GfoIfXap/PrlPOnEk7pPm0A36Elkc0iTd5lxFj%2bdy3UQUuL4a4/Z6JLh2rbCNmKZzmrkCWGQiw8ElKu0a/nz2T2SaeXWo6ehUlpoQLfTfbOH4XRGNFqNDd8KcgBSPw8pCZLMKyTWaE8Xj8TQKxGOF9JauD9ozc20dAeKxH9cpk8fh%2bwecB2YsgKmkPowwFeZ5oBcKoDlNvLKP0I8uBH0l/grjoZh3JCbddzr46fQa2daF0D1JipimeooxNp0qm2M2PSbNHJt9ut2iuUR3ArNZEHnokXhGADQVnZtPw2BfcnFxgVFTtFXIIch%2bEP%2brqESn6wU4POuh0hRUdp1pGNQhUZ/ndbKTRmeUmQ2h3oPmmmHwWz6WLD8OXw5hUeOvXsCWdNnqskrjytHWxV6O53vJBkN3pZrgvKLGOs8CayuLz6TCIu2gPwGywLNRaXiS6DAKOJOSth98U1mczdTwsrmm9vXctILI2ktilsR/JkCenOayFQ8nrOjERQ0CnW8URJYVNdIsYJWCiB4vK4l9twUQCIkFV5JJTQoiFwrZeaA5LvkiAF/5vz4N6o0s%2by6wqKCadhpcVBEyD0NrL4tzwYZkV4VCAReSBYahhD07xC8nQ9Q6ofh7jMYrlsV1UcNE8WRRY1653YwCX5XbUwoia7EAIj%2b1r/1qIIlQXeJ7vh6qVJfuYJrx5Pvet4PgKqfBRdXotDxgrRgwqRNeS0LUF2AUF4lrhmy0GP3tgGO6jr6vxxQmT5d8zpyn6X3J9G4Sa%2borlUA63VLTzee4rt7Db/ZxlIchMkgsoNldxacs/jRz2iT5rPmjZvSZXNPMtZlokUGtweSPzOlCRvJH4dHyvkf7K30e5waJCWSiJgcWMjRNk4UBmmK71VYmTmGYm%2bFcN05lSUtuUvt32ocNnZkmKzlm0sZ1%2bY60Ss9v%2bg%2bRRS9bloGV5eRHoS1717yv1auM12oB8/LqRbRFiRWrTrQks1afNi9tH/PWXrsLpGlzGYPzNj1vk/MYe8j/gdYhgP8C5nElwdaVH/gAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"500\" alt=\"Logistic Regression vs Random Forest vs Deep Learning on Higgs dataset \" data-srcset=\"/assets/static/linear_random_forest_deep_learning_higgs_szilard.b269a45.d804c7fb93198845930e632244f398d6.png 500w\" data-sizes=\"(max-width: 500px) 100vw, 500px\" data-src=\"/assets/static/linear_random_forest_deep_learning_higgs_szilard.b269a45.d804c7fb93198845930e632244f398d6.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded md-figure-image\" src=\"/assets/static/linear_random_forest_deep_learning_higgs_szilard.b269a45.d804c7fb93198845930e632244f398d6.png\" width=\"500\" alt=\"Logistic Regression vs Random Forest vs Deep Learning on Higgs dataset \"></noscript><figcaption class=\"md-figure-caption\">Logistic Regression vs Random Forest vs Deep Learning on Higgs dataset</figcaption></figure></p>\n<p>In general there is no guarantee that, even with a lot of data, deep learning does better than other techniques, for example tree-based such as random forest or <a href=\"https://xgboost.readthedocs.io/en/latest/model.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">boosted trees</a>.</p>\n<h2 id=\"lets-play\"><a href=\"#lets-play\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Let's play!</h2>\n<p>Do I need some <a href=\"https://en.wikipedia.org/wiki/Skynet_%28Terminator%29\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Skynet</a> to run it? Actually not - it's a piece of software, like any other. And you can even play with it in your browser:</p>\n<ul>\n<li><a href=\"http://playground.tensorflow.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TensorFlow Playground</a> for point separation, with a visual interface</li>\n<li><a href=\"http://cs.stanford.edu/people/karpathy/convnetjs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ConvNetJS</a> for digit and image recognition</li>\n<li><a href=\"https://transcranial.github.io/keras-js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Keras.js Demo</a> - to visualize and use real networks in your browser (e.g. ResNet-50)</li>\n</ul>\n<p>Or... if you want to use Keras in Python, see <a href=\"https://github.com/stared/keras-mini-examples/blob/master/mnist_simple.ipynb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this minimal example</a> - just to get convinced you can use it on your own computer.</p>\n<h2 id=\"python-and-machine-learning\"><a href=\"#python-and-machine-learning\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Python and machine learning</h2>\n<p>I mentioned basics Python and machine learning as a requirement.\nThey are already covered in <a href=\"http://p.migdal.pl/2016/03/15/data-science-intro-for-math-phys-background.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">my introduction to data science</a> in <a href=\"http://p.migdal.pl/2016/03/15/data-science-intro-for-math-phys-background.html#python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python</a> and <a href=\"http://p.migdal.pl/2016/03/15/data-science-intro-for-math-phys-background.html#statistics-and-machine-learning\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">statistics and machine learning</a> sections, respectively.</p>\n<p>For Python, if you already have <a href=\"https://www.continuum.io/downloads\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Anaconda distribution</a> (covering most data science packages), the only thing you need is to install <a href=\"https://www.tensorflow.org/install/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TensorFlow</a> and <a href=\"https://keras.io/#installation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Keras</a>.</p>\n<p>When it comes to machine learning, you don't need to learn many techniques before jumping into deep learning. Though, later it would be a good practice to see if a given problem can be solved with much simpler methods. For example, <a href=\"http://blog.yhat.com/posts/random-forests-in-python.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">random forest</a> is often a lockpick, working out-of-the-box for many problems. You need to understand why we need to train and then test a classifier (to validate its predictive power). To get the gist of it, start with this beautiful tree-based animation:</p>\n<ul>\n<li><a href=\"http://www.r2d3.us/visual-intro-to-machine-learning-part-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visual introduction to machine learning</a> by Stephanie Yee and Tony Chu</li>\n</ul>\n<p>Also, it is good to understand <a href=\"https://en.wikipedia.org/wiki/Logistic_regression\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">logistic regression</a>, which is a building block of almost any neural network for classification.</p>\n<h2 id=\"mathematics\"><a href=\"#mathematics\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Mathematics</h2>\n<p>Deep learning (that is - neural networks with many layers) uses mostly very simple mathematical operations - just many of them. Here there are a few, which you can find in almost any network (look at this list, but don't get intimidated):</p>\n<ul>\n<li>vectors, matrices, multi-dimensional arrays,</li>\n<li>addition, multiplication,</li>\n<li><a href=\"http://setosa.io/ev/image-kernels/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">convolutions</a> to extract and process local patterns,</li>\n<li>activation functions: <a href=\"https://en.wikipedia.org/wiki/Sigmoid_function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sigmoid</a>, <a href=\"https://www.wolframalpha.com/input/?i=tanh%5Bx%5D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">tanh</a> or <a href=\"https://en.wikipedia.org/wiki/Rectifier_%28neural_networks%29\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ReLU</a> to add non-linearity,</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Softmax_function\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">softmax</a> to convert vectors into probabilities,</li>\n<li><a href=\"http://datascience.stackexchange.com/questions/9302/the-cross-entropy-error-function-in-neural-networks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">log-loss (cross-entropy)</a> to penalize wrong guesses in a smart way (see also <a href=\"https://www.countbayesie.com/blog/2017/5/9/kullback-leibler-divergence-explained\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kullback-Leibler Divergence Explained</a>),</li>\n<li>gradients and chain-rule (<a href=\"http://cs231n.github.io/optimization-2/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">backpropagation</a>) for optimizing network parameters,</li>\n<li>stochastic gradient descent and its variants (e.g. <a href=\"http://distill.pub/2017/momentum/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">momentum</a>).</li>\n</ul>\n<p>If your background is in mathematics, statistics, physics[^quantum] or signal processing - most likely you already know more than enough to start!</p>\n<p>If your last contact with mathematics was in high-school, don't worry. Its mathematics is simple to the point that a convolutional neural network for digit recognition can be implemented in a spreadsheet (with no macros), see: <a href=\"http://www.deepexcel.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deep Spreadsheets with ExcelNet</a>.\nIt is only a proof-of-principle solution - not only inefficient, but also lacking the most crucial part - the ability to train new networks.</p>\n<p>The basics of vector calculus are crucial not only for deep learning, but also for many other machine learning techniques (e.g. in <a href=\"p.migdal.pl/2017/01/06/king-man-woman-queen-why.html\">word2vec I wrote about</a>).\nTo learn it, I recommend starting from one of the following:</p>\n<ul>\n<li><a href=\"https://hadrienj.github.io/posts/Deep-Learning-Book-Series-Introduction/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Getting started with linear algebra for deep learning</a> by Hadrien Jean (an intro to <a href=\"http://www.deeplearningbook.org/contents/linear_algebra.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Linear Algebra</a> from the <a href=\"http://www.deeplearningbook.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deep Learning</a>)</li>\n<li>J. Ström, K. Åström, and T. Akenine-Möller, <a href=\"http://immersivemath.com/ila/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Immersive Linear Algebra</a> - a linear algebra book with fully interactive figures</li>\n<li><a href=\"https://medium.com/towards-data-science/linear-algebra-cheat-sheet-for-deep-learning-cd67aba4526c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Linear algebra cheat sheet for deep learning</a> by Brendan Fortuner</li>\n</ul>\n<p>Since there are many references to <a href=\"https://docs.scipy.org/doc/numpy-dev/user/quickstart.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NumPy</a>, it may be useful to learn its basics:</p>\n<ul>\n<li><a href=\"http://www.labri.fr/perso/nrougier/from-python-to-numpy/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">From Python to Numpy</a> by Nicolas P. Rougier</li>\n<li><a href=\"http://www.scipy-lectures.org/intro/numpy/array_object.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SciPy lectures: The NumPy array object</a></li>\n</ul>\n<p>At the same time - look back at the meme, at the <em>What mathematicians think I do</em> part. It's totally fine to start from a magically working code, treating neural network layers like LEGO blocks.</p>\n<h2 id=\"frameworks\"><a href=\"#frameworks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Frameworks</h2>\n<p>There is a handful of popular deep learning libraries, including <a href=\"https://www.tensorflow.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TensorFlow</a>, <a href=\"http://deeplearning.net/software/theano/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Theano</a>, <a href=\"http://torch.ch/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Torch</a> and <a href=\"http://caffe.berkeleyvision.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Caffe</a>. Each of them has Python interface (now also for Torch: <a href=\"http://pytorch.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PyTorch</a>).</p>\n<p>So, which to choose? First, as always, screw all subtle performance benchmarks, as <em><a href=\"https://en.wikiquote.org/wiki/Donald_Knuth\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">premature optimization is the root of all evil</a></em>.\nWhat is crucial is to start with one which is easy to write (and read!), one with many online resources, and one that you can actually install on your computer without too much pain.</p>\n<p>Bear in mind that core frameworks are multidimensional array expression compilers with GPU support. Current neural networks can be expressed as such. However, if you just want to work with neural networks, by <a href=\"https://en.wikipedia.org/wiki/Rule_of_least_power\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rule of least power</a>, I recommend starting with a framework just for neural networks. For example...</p>\n<h3 id=\"keras\"><a href=\"#keras\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keras</h3>\n<p>If you like the <a href=\"https://en.wikipedia.org/wiki/Zen_of_Python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">philosophy of Python</a> (brevity, readability, one preferred way to do things), <a href=\"https://keras.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Keras</a> is for you. It is a high-level library for neural networks, using TensorFlow or Theano as its backend.\nAlso, if you want to have a propaganda picture, there is a possibly biased (or <a href=\"https://en.wikipedia.org/wiki/Overfitting\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">overfitted</a>?) popularity ranking:</p>\n<ul>\n<li><a href=\"https://twitter.com/fchollet/status/852194634470223873\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The state of deep learning frameworks (from GitHub metrics), April 2017. - François Chollet (Keras creator)</a></li>\n</ul>\n<img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 869 232' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-a746ec02e1b7f4ce38d3bfd9663d1af0'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-a746ec02e1b7f4ce38d3bfd9663d1af0)' width='869' height='232' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAARCAYAAABtu6qMAAAACXBIWXMAAAsSAAALEgHS3X78AAAKMUlEQVRYw5VX%2bVeU5xXmD%2bnpT/2lv7X9qW26eKrENEltGmOMmEiioLggYIgmKgoYjUmapFaPpwoubCqCcQMk4DD7vq/MDDPDgMzCLIDsMyxPn%2b8jHkXEtHPOc95vee997nfv%2b77PnZya2hpszduCjRvfwe7du5Gfn4%2b9%2b3ai9MAe7NtXgMKd2/D%2bBxvxcfle7Ny1DftLCnHw4AHkbclDWVkJtm7Nw4cfcs7772PLls18VoqiokLs2kXsLERh4Q68%2b%2b47WLNmDdauXSsiNzcXr7zyCiqOVaC6ugqbNm2in63Ys2cXfeVj83vk%2b2QfthfkoZzjwUPF9JmPQ4f2M56t2FGwjVxbabMF5eUfo6BgO2Mvwo4dHzHGQrz11gasy/0L1q/PxauvruO4DuvWrV3BL3xvTlPjHVRXnRYDqTz%2bNY4crsTO7Z8jb9NpbHm7Gm%2b/WYE//bYYf3%2bjGhter8Rraytw%2bNPvUFVZhZMnvuN1JT47VIWPD1Tg4CcVOPn5t6g4cgLHKr5AdeVX9PcFSooPMZnFKC0tFVFWVsaP3YMLF2pw7uxVnDhxEkePHMenB0/S9iTy3i3DextP4c31R/GPN09g44aTeD33CJ99idw1h5H/wTHanEB5WQVOn/oORw9X43jFV4zpC1QdP409RQeQv60IH324h%2bNuEcXF%2b0XukpIlfuHjv/nmG%2bRYLUmYLTEsLGRgtcTh9abw2cEw/vwHD954zYfX1/uxt6Afpbv6UFoUwM4P/OjujCGZfAy5dAhWcwI2WxK9njS02rjow2rhM/oMh1LwexPodaWQyc5hbu4p5ufnMD2dgUoVxeDgKKYmp9EjicBuS%2bDC%2bTj%2b%2bHsPij4KiLzFhX6OAZTs8pO/D41XIpiamoRaFYdeF4XDkSQS0JHfbI7DYUvB40yjPziGWHQCLnua82dFzuUxzCOno8uNq00ymE1a3L2vwvUWBfJ2P8Qv13TiV7md%2bN2GLjyQaNHbq4fNroPDqSeJFj90q3D1mgpNN5Woa1KgsVmB%2butKXG6Qo%2bGGElKZGgaDFjq9Fnq9hh%2bqegq1GkqlAnaHm3YG8irIr6GtgvxKlB%2bT4Bd/eICbd5Xw%2b5/wLnELo9WqhUSiwpVGgXcp5to6ORpvKHDlmhL1HLt7BH4NNBo1Y3iOX6WGQqFg4WzI8bnT8LpTAOYRGxrHYP8ITh17hE1v9GHjX/twtTbGd1lmMIOZmYxYtbm5LB6Fx2A1DqM/kIbPk4SHVXDZk3DbE%2bjrTSHgH2GGs5idzSCTWYksfczQl800zCqNY3FxDnauRpdtGBfORrH5b30IhydEHwKnwP0sf4SxWgzDCJEn1JeGy5qArzeN2ZkZYDGLbEaoeAYLtM9mOS5kMT/348hnYgzZLHLutDtRUyeB0aDGrTsyZlWKTdu78bNfP8DPf9OBi5elfKeCXK5k1ZTMnBJajRJNN2T493%2bkuH1PgQtXZLhI1F2TsbpChpVihoX5q0GhkLMCLtQ2aPH9XRmXr4orSEZ/cmzf/xCbC7rIq4Rc8bydEmq1Eu0PFDhXI0PNVRku1ctwuVGGlttKnL0oYzxS8TvOXpDy2/iufmlOPeO7VCfFGcZ9v10Kh92KHCf3nNUcxdz8DAb603DaY6g8OoAz54dg8z1GIjnOrE9icvIpZmen0B9KQyEdhEEXg9kYFWHQR2EihHczM1PLbJ6HsIfHx6egVUUQ7k%2bxGtPiudHriqH24hDk6hSrNY2JiZW2Av9gOA1J9yBczjh0miHGEeUKimFoaBQjo5PEBOLD44gRieSEiPTI0rNofBxjYxOMcRo5PfIAM2eA3%2beGUmVDV7cFe0s0aG8z4dGgmwROOJ%2bBw%2bGEx%2bPEQ6kNDddNaO8w4849jp0WtN42s/oWHoJ2uFzL7Zwr/NgRCPTj5m07pHIL%2bV1cCfTVZkbV5zp0d9vg87pEvuf53W4nV5qNfEv899tNuMXru/fN6JHboVQ7IFPY4eE8Ae4ncC3dezyuH/kDyFGqwujsciESCcNk9tOxF6f%2bSWNvCKHQizEw0I%2bHEg86Oj3Q6nyQ9PQycR6oND5W1C0iEAiiv391H6FQEI8eRdHW4YXR5BP5H/zgoR83vv6XDWqdn9XsRzC43E64Hxzsh4689zs8kMm9LJyXiXBDIvOhtdWB1hY7tHof%2bVfaP/UTJGcEORYuG4MhzCWT4lKMwmYN49yZAA%2bgOFKpBBKJ5RgeTvA5Zcc2AFlPACZjGFJJAHptP0/7MJdlEDJpCIFgTLQX5j/vQ0QygWRihCtmgNI7hNHRJPf8ALdRGDcaAlwRUYyMJFfYP%2bHv8w%2bRt0%2bcr5SHKMkBSuggFLKQiL5AVJz3Qm7RzzD9jyCnjVm/1KCktBiZVT1u3lKjvFLBlWCA0WhgcpZDrzfAZDKgR6ZHU7OGMqjF9VYtbt3lYXaP1y1aNH%2bvY3W04jxh/vM%2blvzo4Pb4eAgauX20TLyB20Hwp0HrHS0MAvcLbPWGpbiUKj1aydlwQ%2bDXofmWBm2dOtRd16ChWYd7HfpVuQXodDpuUxdyeh08%2bGyCDC5QGrKUlVE2GnFR9hYW5pc1Dk%2bwuDjPQ%2bgxm40UvGxyfJS9XjYeQsNjNQqVnRBlNZOZ4%2bH2YghNyOxMFkbNMKKRcc5fRCgwCrMhgWBgfFVuAQvkH0lPifwhf3pJBu287huBj5I%2bOzMr8q9mv7wR6nbiyzNd3ItyUZrqr0mx95NudD%2bUU3bklL%2bVUKkUPPhkqK2XooHz6yhfdU1SNjI9hJTVWZIqjWYJas3S/bPP5DIpV52Ttlp8e76b79jU3JDi4tUetHwvXZVbgNBE/dAlp8xJcL62h1InFSW4hrbnLvaIflazFSBItFQqhcViQY7XnaSEDCGdfkyJmWBTNAyDKYXJqdVlbEaQwWAKStkjOKxsPw1RymccbqdwHYPLEWdF4jBqo7AYY%2bI74d5hi8HBVtmgi%2bDx%2bDgmJ6ZgNcW4d2OU2inua8aijbCtTr1URqf5LhYZIVeErXCE24e8%2bogoqVp1FPH4mOjvZTIs%2bpmmDEoVfu4f7guTnTJj5941oVti5v5wwG63vxDCu7uUyUt1elbLxOwb2MBYuIfNaGgy4M5dA/t0Ew9JAw8nIw8pI1RKEzRqE6R8JnloZPUpff4g/dgpfUbRp1xhYQNjEGXtZfxut0OU68v1ejS3mnCtxYj6Rj2u3TThJuPpklj4LavbOxwO8lvJ7xdkkFrcYoPVLrSeQUqaG3Kll9dLUvEiCO96pB52jk52ZG4mzY22dheuNzu4dTxweYKiVD4LwUbAk/tQKEA5i/Bje5k8hyiZdjuLQQnT6Lzi/cv4Bcm%2bddtJezce8P/M/TYXD1OPKIdKVS%2bCoeCq9oIMCj3A0NAQckZSWQxHZ8H2WvyNjcxhfGwRP/WbHF/A0MAMErEMhmOzCAdnEBmcRTo5h//nl4xnRAi/xQUgxevs7E/bzU4vIp0QYs9g4vEcUsNZ%2bsmKMUxNLPzP/P8FhPYi1DgU490AAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"869\" data-srcset=\"/assets/static/deep_learning_framework_popularity_apr2017_fchollet.82a2fbd.03c9fef4d3546c323281c80bbf9b0f43.png 480w, /assets/static/deep_learning_framework_popularity_apr2017_fchollet.372248f.03c9fef4d3546c323281c80bbf9b0f43.png 869w\" data-sizes=\"(max-width: 869px) 100vw, 869px\" data-src=\"/assets/static/deep_learning_framework_popularity_apr2017_fchollet.372248f.03c9fef4d3546c323281c80bbf9b0f43.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/deep_learning_framework_popularity_apr2017_fchollet.372248f.03c9fef4d3546c323281c80bbf9b0f43.png\" width=\"869\"></noscript>\n<p>If you want to consult a different source, based on arXiv papers rather than GitHub activity, see <a href=\"https://medium.com/@karpathy/a-peek-at-trends-in-machine-learning-ab8a1085a106\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Peek at Trends in Machine Learning</a> by Andrej Karpathy.\nPopularity is important - it means that if you want to search for a network architecture, googling for it (e.g. <code>UNet Keras</code>) is likely to return an example.\nWhere to start learning it? Documentation on Keras is nice, and <a href=\"https://blog.keras.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">its blog</a> is a valuable resource. For a complete, interactive introduction to deep learning with Keras in <a href=\"http://jupyter.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jupyter Notebook</a>, I really recommend:</p>\n<ul>\n<li><a href=\"https://github.com/leriomaggio/deep-learning-keras-tensorflow\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deep Learning with Keras and TensorFlow</a> by Valerio Maggio</li>\n</ul>\n<p>For shorter ones, try one of these:</p>\n<ul>\n<li><a href=\"https://hackernoon.com/visualizing-parts-of-convolutional-neural-networks-using-keras-and-cats-5cc01b214e59\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Visualizing parts of Convolutional Neural Networks using Keras and Cats</a> by Erik Reppel</li>\n<li><a href=\"https://cambridgespark.com/content/tutorials/convolutional-neural-networks-with-keras/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deep learning for complete beginners: convolutional neural networks with Keras</a> by Petar Veličković</li>\n<li><a href=\"http://machinelearningmastery.com/handwritten-digit-recognition-using-convolutional-neural-networks-python-keras/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Handwritten Digit Recognition using Convolutional Neural Networks in Python with Keras</a> by Jason Brownlee (Theano tensor dimension order[^theano])</li>\n</ul>\n<p>There are a few add-ons to Keras, which are especially useful for learning it. I created <a href=\"https://github.com/stared/keras-sequential-ascii\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ASCII summary for sequential models</a> to show data flow inside networks (in a nicer way than <code>model.summary()</code>).\nIt shows layers, dimensions of data <code>(x, y, channels)</code> and the number of free parameters (to be optimized). For example, for <a href=\"https://github.com/fchollet/keras/blob/master/examples/mnist_cnn.py\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a network for digit recognition</a> it might look like:</p>\n<pre><code>           OPERATION           DATA DIMENSIONS   WEIGHTS(N)   WEIGHTS(%)\n\n               Input   #####     32   32    3\n              Conv2D    \\|/  -------------------       896     0.1%\n                relu   #####     32   32   32\n              Conv2D    \\|/  -------------------      9248     0.7%\n                relu   #####     30   30   32\n        MaxPooling2D   Y max -------------------         0     0.0%\n                       #####     15   15   32\n             Dropout    | || -------------------         0     0.0%\n                       #####     15   15   32\n              Conv2D    \\|/  -------------------     18496     1.5%\n                relu   #####     15   15   64\n              Conv2D    \\|/  -------------------     36928     3.0%\n                relu   #####     13   13   64\n        MaxPooling2D   Y max -------------------         0     0.0%\n                       #####      6    6   64\n             Dropout    | || -------------------         0     0.0%\n                       #####      6    6   64\n             Flatten   ||||| -------------------         0     0.0%\n                       #####        2304\n               Dense   XXXXX -------------------   1180160    94.3%\n                relu   #####         512\n             Dropout    | || -------------------         0     0.0%\n                       #####         512\n               Dense   XXXXX -------------------      5130     0.4%\n             softmax   #####          10\n</code></pre>\n<p>You might be also interested in nicer progress bars with <a href=\"https://github.com/bstriner/keras-tqdm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">keras-tqdm</a>, exploration of activations at each layer with <a href=\"https://github.com/keplr-io/quiver\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">quiver</a>, checking attention maps with <a href=\"https://github.com/raghakot/keras-vis\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">keras-vis</a> or converting Keras models to JavaScript, runnable in a browser with <a href=\"https://transcranial.github.io/keras-js/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Keras.js</a>.\nSpeaking of languages, there is also <a href=\"https://rstudio.github.io/keras/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">R interface to Keras</a>.</p>\n<p><strong>EDIT</strong> (March 2018): Also, I wrote <a href=\"https://github.com/stared/livelossplot/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">livelossplot</a> - a live training loss plot in Jupyter Notebook (for Keras, PyTorch and other frameworks).</p>\n<h3 id=\"tensorflow\"><a href=\"#tensorflow\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>TensorFlow</h3>\n<p>If not Keras, then I recommend starting with bare TensorFlow.\nIt is a bit more low-level and verbose, but makes it straightforward to optimize various multidimensional array (or, well, tensor) operations. A few good resources:</p>\n<ul>\n<li>the official <a href=\"https://www.tensorflow.org/versions/master/tutorials/index.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TensorFlow Tutorial</a> is very good</li>\n<li><a href=\"https://cloud.google.com/blog/big-data/2017/01/learn-tensorflow-and-deep-learning-without-a-phd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Learn TensorFlow and deep learning, without a Ph.D.</a> by Martin Görner</li>\n<li><a href=\"https://github.com/aymericdamien/TensorFlow-Examples/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TensorFlow Tutorial and Examples for beginners</a> by Aymeric Damien (with Python 2.7)</li>\n<li><a href=\"https://github.com/nlintz/TensorFlow-Tutorials\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Simple tutorials using Google's TensorFlow Framework</a> by Nathan Lintz</li>\n</ul>\n<p>In any case, <a href=\"https://www.tensorflow.org/get_started/summaries_and_tensorboard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TensorBoard</a> makes it easy to keep track of the training process. It can also be <a href=\"http://stackoverflow.com/questions/42112260/how-do-i-use-the-tensorboard-callback-of-keras\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">used with Keras, via callbacks</a>.</p>\n<h3 id=\"other\"><a href=\"#other\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Other</h3>\n<p><a href=\"http://deeplearning.net/software/theano/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Theano</a> is similar to TensorFlow, but a bit older and harder to start.\nFor example, you need to manually write updates of variables. Typical neural network layers are not included, so one often uses libraries such as <a href=\"https://lasagne.readthedocs.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Lasagne</a>. If you're looking for a place to start, I like this introduction:</p>\n<ul>\n<li><a href=\"http://www.marekrei.com/blog/theano-tutorial/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Theano Tutorial</a> by Marek Rei</li>\n</ul>\n<p>At the same time, if you see some nice code in Torch or PyTorch, don't be afraid to install and run it!</p>\n<p><strong>EDIT</strong> (July 2017): If you want a low-level framework, <a href=\"http://pytorch.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PyTorch</a> may be the best way to start.\nIt combines relatively brief and readable code (almost like Keras) but at the same time gives low-level access to all features (actually, more than TensorFlow). Start here:</p>\n<ul>\n<li><a href=\"http://pytorch.org/tutorials/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PyTorch - Tutorials</a></li>\n<li><a href=\"https://github.com/pytorch/examples\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A repository showcasing examples of using PyTorch</a></li>\n</ul>\n<p><strong>EDIT</strong> (June 2018): In <a href=\"https://deepsense.ai/keras-or-pytorch/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Keras or PyTorch as your first deep learning framework</a> I discuss pros and cons of starting learning deep learning with each of them.</p>\n<h2 id=\"datasets\"><a href=\"#datasets\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Datasets</h2>\n<p>Every machine learning problem needs data. You cannot just tell it <em>\"detect if there is a cat in this picture\"</em> and expect the computer to tell you the answer. You need to <em>show</em> many instances of cats, and pictures not containing cats, and (hopefully) it will learn to generalize it to other cases.\nSo, you need some data to start. And it is not a drawback of machine learning or just deep learning - it is a fundamental property of any learning!</p>\n<p>Before you dive into uncharted waters, it is good to take a look at some <a href=\"https://www.kaggle.com/benhamner/d/benhamner/nips-papers/popular-datasets-over-time/code\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">popular datasets</a>. The key part about them is that they are... popular. It means that you can find a lot of examples what works.\nAnd have a guarantee that these problems can be solved with neural networks.</p>\n<h3 id=\"mnist\"><a href=\"#mnist\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MNIST</h3>\n<blockquote>\n<p>Many good ideas will not work well on MNIST (e.g. batch norm). Inversely many bad ideas may work on MNIST and no[t] transfer to real [computer vision]. - <a href=\"https://twitter.com/fchollet/status/852594987527045120\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">François Chollet's tweet</a></p>\n</blockquote>\n<p>Still, I recommend starting with the <a href=\"http://yann.lecun.com/exdb/mnist/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MNIST digit recognition dataset</a> (60k grayscale 28x28 images), included in <a href=\"https://keras.io/datasets/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">keras.datasets</a>. Not necessary to master it, but just to get a sense that it works at all (or to test the basics of Keras on your local machine).</p>\n<h3 id=\"notmnist\"><a href=\"#notmnist\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>notMNIST</h3>\n<blockquote>\n<p>Indeed, I once even proposed that the toughest challenge facing AI workers is to answer the question: \"What are the letters 'A' and 'I'? - <a href=\"https://web.stanford.edu/group/SHR/4-2/text/hofstadter.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Douglas R. Hofstadter</a> (1995)</p>\n</blockquote>\n<p>A more interesting dataset, and harder for classical machine learning algorithms, is <a href=\"http://yaroslavvb.blogspot.com/2011/09/notmnist-dataset.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">notMNIST</a> (letters A-J from strange fonts). If you want to start with it, here is my <a href=\"https://github.com/stared/keras-mini-examples/blob/master/notMNIST_starter.ipynb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">code for notMNIST loading and logistic regression in Keras</a>.</p>\n<h3 id=\"cifar\"><a href=\"#cifar\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CIFAR</h3>\n<p>If you want to play with image recognition, there is <a href=\"https://www.cs.toronto.edu/~kriz/cifar.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CIFAR dataset</a>, a dataset of 32x32 photos (also in <a href=\"https://keras.io/datasets/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">keras.datasets</a>). It comes in two versions: 10 simple classes (including cats, dogs, frogs and airplanes ) and 100 harder and more nuanced classes (including beaver, dolphin, otter, seal and whale). I strongly suggest <a href=\"https://github.com/stared/keras-mini-examples/blob/master/cifar10_starter.ipynb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">starting with CIFAR-10</a>, the simpler version.\nBeware, <a href=\"https://github.com/stared/keras-mini-examples/blob/master/cifar10_official_example.ipynb\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">more complicated networks may take quite some time</a> (~12h on CPU my 7 year old Macbook Pro).</p>\n<p><strong>EDIT</strong> (Nov 2017): If you are interested in practical exercises, I wrote <a href=\"https://blog.deepsense.ai/deep-learning-hands-on-image-classification/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Starting deep learning hands-on: image classification on CIFAR-10</a>.</p>\n<h3 id=\"more\"><a href=\"#more\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>More</h3>\n<p>Deep learning requires a lot of data. If you want to train your network from scratch, it may require as many as ~10k images even if low-resolution (32x32).\nEspecially if data is scarce, there is no guarantee that a network will learn anything. So, what are the ways to go?</p>\n<ul>\n<li>use really low res (if your eye can see it, no need to use higher resolution)</li>\n<li>get a lot of data (for images like 256x256 it may be: millions of instances)</li>\n<li>re-train a network that already saw a lot</li>\n<li>generate much more data (with rotations, shifts, distortions)</li>\n</ul>\n<p>Often, it's a combination of everything mentioned here.</p>\n<p><strong>EDIT</strong> (May 2018): Were to look for suitable datasets? <a href=\"https://www.kaggle.com/datasets\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kaggle Datasets</a> is a place to start (along with some <a href=\"https://www.kaggle.com/competitions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kaggle Competitions</a>).</p>\n<h2 id=\"standing-on-the-shoulders-of-giants\"><a href=\"#standing-on-the-shoulders-of-giants\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Standing on the shoulders of giants</h2>\n<p>Creating a new neural network has a lot in common with cooking - there are typical ingredients (layers) and recipes (popular network architectures).\nThe most important cooking contest is <a href=\"http://image-net.org/challenges/LSVRC/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ImageNet Large Scale Visual Recognition Challenge</a>, with recognition of hundreds of classes from half a million dataset of photos.\nLook at these <a href=\"https://culurciello.github.io/tech/2016/06/04/nets.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Neural Network Architectures</a>, typically using 224x224x3 input (chart by Eugenio Culurciello):</p>\n<p><figure class=\"md-figure-block\"><img class=\"g-image g-image--lazy g-image--loading md-figure-image\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 658 428' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3888925e9c019955d7860f9fa579866f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3888925e9c019955d7860f9fa579866f)' width='658' height='428' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAqCAYAAAADBl3iAAAACXBIWXMAAAsSAAALEgHS3X78AAAOsUlEQVRo3s1aaXAcxRVWLpIUBMJdJCThDGdCKhCKkCIpKlWp4kcSKqn8IKQIJA4YX/gi2MbchMtFAQnE3HZsAhhjyfiUrXN1y7JOW1pdlizJui1p79XuzO6X/nr3jUajWVl28SNd1ZqZ7pk%2b3vve997rVRZUSSaTusZiMfh8PtjbnHW2voS8M8t3voiB0KSpnycnJ3H8%2bHE9bygY1NU3MaHbo9Gobh8bG4NpmrPOe6qVJUtuWEKhEA4fPjxjMpZEIqGr9NmvZrpditXPb8yEdd/SH0Jp2wTK2ycw5I8jGPCjsLAQZeUVyNm5C9t37UJxSSmKi4vR1NSk18J%2bCkPGTTjmksJ2%2b17m0se2LN5MKKlzos7OTjQ3N1sf2QUhg9ifrc0mE1oIx3xKa0ZialIKB6mJR6MJeLzjqO6kAFLXeNxIvRPwYbKzFZG2ZiTUfZwat81pvxINcm9fk7S71Ux9GgH8EwgEUFdXpwXAK0s8Hrc%2blA2xbWrTCsLRSaVhA%2bHJOF4t6cF9W5rxj/wu%2bMKx1Bj9o4jur0I8twL%2bpi5Ud/lR3jaG0tZxHOgch6HGSIyNIl5eBKNkP8ySPBjlhTCGB%2bGuZ8xAgAiCa5V7ZzUMw7V9hgmEw2G0tLRY5lBUVISGhgaUl5dj9%2b7d2LdvHyoqKtBQX4/Onm5UNtQiFgmgYSCEP310GGv3duAedS3oVjwSCiOyaQ%2bib%2bdg8t3PYL67HSMNXag8GlKb92EkEEshp64aRmkezMpiGKyl%2bYgfrNB9RGY0EtHr8vv9CCqOID9EVBu5g8%2bzwdyuvFlNQDpJgCIASo0END4%2bjr6%2bPnR3d%2btJh4aGEIiEEGztxcC%2bGgWDGHrVZhZs8%2bLej5sxT6Gg1aeQ0nwEkTezEfkwF9GP92Pync9g5FUjaiYRFzOJRmBWeWAqrcfVNV5Vou9jFcUKPjEUKAXsUYLPycnBjh07sGXLFrS2tqK2thb5%2bfmorKycxg1OkpZiR/KsJEhTaGxs1OzLASlp%2b4fUhi5NfYgu2oTYvPcRfXUfZ0DLSBibDg6gri/lRQxvN6LrtyGyWaHgv7mYfCsbseJaEX3KY6jvzLoqrXXDgYBketE0O65ntuLkKLd25/vTOIAS4iSEWkFBAXbu3Klhn52drSV/8OBBLfWcbdkYDwdgri9C8K/vIvjYVoTvewdG17D7yvJqkNiwC8kNu2FsyQf84alFpEkyqTiAWicHaB4oK4A5MmgJSgrRV15ZgfKycvR092BkeARV1dXaNJwwp%2bKIDk%2bRBzVVNTg%2bfBwejwdt7W0zvFiWfHDgwAHtAbhRPhPqtDFOzEnICWPqnuCN5x9GZPFGhOe/j8jaT2GqjcUTKV/tVyhqUigaHh1Fu9cL795CdO3zYKyvH53dXejo6NDja%2bIiOaW9gNHdAZPVPwEjoTSXJjVNbmqhAX8AfUd6kF9cCE91KTq6OnHE26lcaVD324kuqdj1WN8xlDeWoai%2bAG39rejr7UPQF7S8gkWCIgkuanh42OKAmfSb5onqPtT/fjMG1uxA6I1CTPaNIpbevJgNpb93zx7kKzTtKyyAR2luaGQEB5TGiCYJtizYOqay26zEGL5oAGs/W4dbX7wT1z5xO255/jd4everCMdSZmmYhrWpvmAv3mt5E08cWIXVlcvxaNlKvNuyHv3hvvRWZN5kigNkMmrcHgdM86Xx1CYPz9uGoktegOeHr6DpDx%2bjRxEkTSU3Nxe7VCBDwqpXXmJgYADZ27YpDQVOGJzYo0fYYgwulGXQP4Ibn74DWX8%2bH1994FJ8bf6l%2bMr931PP5%2bHnL/5ORZd%2ba9zeQI/e8JLCB/B3z0N4pGQpVnmW4aHC%2bVhdugJH/d3Txp7mBQh1EYDlQsxUNJcwUgLoeb0ChRc9i4LznoJ3sWJ2FeoMDQ7pDY8oLQ8ODmoNk09oPiQxtwDEjbWdfbLIu95egKx7z8f5S3%2bAsxdfi7MWXY1vLr4a5z10vRbK/M2r0mgx8VrdOiwtelALYVXpMjxSqgRQskw/Lyt%2bEK/WvmSNqzmAbk5ibTsCnIxqD0CGPzmEgfdqkQwbOFFxRpSZBOD02wL91sFOnKs2%2bo2F39cbZz19wZU4c9FVup6h7i9cfgNG/ePoD/XhYc8SvXFdS6YEwLq6dLnu7/J1WijIYnAj2iIHeBVxSSSo7am6B97c1lQ4q4gtFA4hnJiEPx7ChN%2bnbX5CaVySFme4PFcBOPuMNK8UeMvwxb99R2n8Gpy58Cqcs%2bQ6XL7qVpyxMCUECob39Ueb0T7RguXFC6cEoOqzlY9jdckKbQprylZo02gabUgLwEQWSY/JBt0eYwB6ASlG1MSbd2/Gw6etQMPWRlTWVmLPrj3YrRKXHdt3ICc7R4fP1YrcmEvQldpZltdMYSj7MoWv/CZupBRQ3lGD0x%2b8woL%2bOYuvw4XLfpQyg0XX6Mr71v4j6Al0Y2XxYrXh5VNaV/erPcvTCFiBFcWL0Hq8ZQoBIgBJirih1rZ2PP/043j0nQJcszYXz9y1CR2fpUzDNEzLZORqR4xbIOIGc6eJZSLIQDSE6x67Hac9cAnOXnKtBXtqns9fvv%2b7uOmZO1KxjBnDc9VPYqVnEdaUprQuJsBntrM/akSmOIABQiQd4UnYu/XTT3HBuWdh%2bcsf4fYnC1VUO4Yj7V40HTqk%2b9vb2/WVeUJVVRXa2tqsMZz5/6magJAayweV2cj6y0XK9q/AucoEaA7c/NfnX6bNY0dDniW8hpFaTYIPexZrm2fl5mn7S4vmo3a4ZroXoM8m5CQXYKxNRNBfxyejOvlg8ap2Qp3Z4h7l4%2bWe3zOIYqD0eQpg6pAl9f1bng9wwbIb8CW14S/OuxhfmPdtfGvlj/FBVfZUHJB%2b9%2bBQNZ6qXKNYf4Guy4sW4MmKNTgwWDVjvixqUKDMXICRWk9Pjw6J6dd3qlD4RLG4M/tyM4GTPcCYNkb6vb7xAWws%2bwQv7f233viQig9Em85cIBQPonGkHqXHitEwXItgLOBqolmEMW2fBMiN8xSGHdRoRNVQMDSDtOwML6R1socRzgONE30jXsFZqHlnMmRmeNeKAO3JEPN7ujDCmdpnFOeU1FxY%2b2QPI05lPEO9P6nSZHoIVsP2vXMsCoHCYeW7fHY9ECGhyQO1LrkAtz/Z0qQSFf%2bcUtGT7ZurCXxe42U8EOnt7bU4gCTYrJheC0Pl5W03XoyxJ5biuDKDjz78UMcKJDweWjJNDqTjfDcoz5UEM5nHyfSd6ngaAfv379eRoOQCh9MCiDY34uidt8H39isIKd/f6m1Bf3%2b/jhbpAo8ePWrFD5kW5eb33eKATItzixdmGy/ToYfbeJYAqE27F5BQWL8ci86J%2bd1g6Tw9dvbZc3K3M7xMm7IHX06Y238/sK/BbS7LBOjn6QWIBCZC9Q2NqSCEJ7Y6GzQsYhJychKYk7SS6QMKHqoyVeYc9sUza8zLy9MnT/Q%2b9qiSoTjzE6bVPJSRQqLmN%2bwrKSnRY1r5v0IkuYuum/MdOXLE%2bo6RLU2Xit67d%2b%2b0EyQrHSaUe3qOon9gEIcbVaQUqEXieBmS8UDq2CopmzPn7Lb4Pt0qzcbpo5l1dnV14dixY3pB9j6%2bT2/EqwRh8qsVN8rKiFVcr4zHuTgmvxPT5LrYTsUyWmWq7gzZpx2KBtV3LflrgQO/RLL6VyquvFsRQ6Mc4mUMfDIx81yCpbm%2bL4J2BmXcLBHMbJaCIZ9xPRQKzyiIIm6c3MVsVvjO5Vg8oc8sm3OXqo3/FslDK5GsW4xkx3OpgCNuWBqxb1jCaLk6mdntd71M5wFsIw/JOaR8y3m5ESKGCKCWuUG6bbZJu/Txe16lsl%2burPawffqxeNhEc5HacPkqxDf9EYnXboax4dfA4EGUVdXiPxs3aCjRtmm/NTU1%2bkr%2bkABqNpco9/KjKO1aIMnvqCHZCCu5gu9Sg7IJqXyXGua9XPkOx%2bX70s4q38p77BfhZon2QirgmQjH0ZKzDnj5epiqJl6%2bDuYLlwPrb8No1yEMjY6rBcf0ork4OfrioISfWwTptDk%2bcyGySUJT7JjP9k2xcqP2xcsGRMv2TfLqbLd/Z39XstcsSYPz9u3FoY5e1L6i7H7dlYi/9hPEXv8ZDHWNP3eZIoftmIiYKCst0UxN9i4rK9MhtDCr/SBE4gpuyu6GCHG22aFLLUsqzoWKcAh7CsgOYRESFSBjONvt40ufHUF8liBuigOSJiYUCR56/R4tAOOfNyP%2bxm0wX7sJ5vOXItm0VSHEQN3BGg13ps3cPAUhgzlhT2TJr0vSRhKzb5LaZJ8IxglZbsgJczsCpE8QIIhx4wD7u0KG047FA5MJNOe8DLx0Bcx1V1smkHj9p0j4jp0Su7txgPwGITYu6BFt2xHAd522Lht1tgsBnogDeBXSnn4szlygtQOo3wxj/S9g/usWmBuVR%2bitTv2Co7OqxDSoS80Ug7v1ZfICXBRdGgXDq/AHWVt4g7kLr%2bQfMTG70Oxm4IYAtovJzvACJCJCO8VWQZUd9eD/qdDnE7r2cJgIojcRP0/BULgUGhHESqFILOAaBxBmDBkpnerqKgT8Pkz4lFcIpo68J8bHtEZIVLw6a6b2U%2b1zaxeN88pqb5dAiFX6WQUJTNzErcr75BxLANQ8GZ2hJM/6iAKvyv5S1at9P4mPpMd7tvGd1Hte7RWkjVe5ZwjKWEG%2bkSrj8f%2bAnH2sTLmdbRyP73Mut/E4D0%2bznGuQQx5ZLyvzBu51hgkQTofS6bCzMKa2Jyd2GPFckf9A4Sy0V/a5hco8dJXgyV6IRiY1ElfYCxfNU2y38ZjwWOZrKzQP/m4pP8g6S5adoeW/QtxIi7Yj9uNMhGhfdldo9/mEndiskJosjFCcdr6n5ucctFnnP0jJeFSCG7EK/J0Ey/FIgvbEatqpsJsby3QIMdv9ifq4KEKU2iDEiQCanZwyEcZMc3nlUTvPKgl3Z44/m3s9mfXNQMBspzSZ%2bk7mpEc0SLMgvIkAokOyOGqP92Rv%2bZWZz5lOjWZTmtuxXKaTo/8B2jkGX0VdilYAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"658\" alt=\"Deep Learning Architectures - a scatter plot of network sizes, performances and ops per run\" data-srcset=\"/assets/static/deep_learning_architectures_culurciello.79e067c.5e86a47b15f89fd61211a956c5e3eaab.png 658w\" data-sizes=\"(max-width: 658px) 100vw, 658px\" data-src=\"/assets/static/deep_learning_architectures_culurciello.79e067c.5e86a47b15f89fd61211a956c5e3eaab.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded md-figure-image\" src=\"/assets/static/deep_learning_architectures_culurciello.79e067c.5e86a47b15f89fd61211a956c5e3eaab.png\" width=\"658\" alt=\"Deep Learning Architectures - a scatter plot of network sizes, performances and ops per run\"></noscript><figcaption class=\"md-figure-caption\">Deep Learning Architectures - a scatter plot of network sizes, performances and ops per run</figcaption></figure></p>\n<p>Circle size represents the number of parameters (a lot!). It doesn't mention <a href=\"https://gab41.lab41.org/lab41-reading-group-squeezenet-9b9d1d754c75\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SqueezeNet</a> though, an architecture vastly reducing the number of parameters (e.g. 50x fewer).</p>\n<p>A few key networks for image classification can be readily loaded from the <a href=\"https://keras.io/applications/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">keras.applications</a> module: Xception, VGG16, VGG19, ResNet50, InceptionV3. Some others are not as plug &#x26; play, but still easy to find online - yes, there is <a href=\"https://github.com/rcmalli/keras-squeezenet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SqueezeNet in Keras</a>.\nThese networks serve two purposes:</p>\n<ul>\n<li>they give insight into useful building blocks and architectures</li>\n<li>they are great candidates for retraining (so-called <a href=\"http://cs231n.github.io/transfer-learning/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">transfer learning</a>), when using architecture along with pre-trained weights)</li>\n</ul>\n<p>Some other important network architectures for images:</p>\n<ul>\n<li>\n<p><a href=\"https://lmb.informatik.uni-freiburg.de/people/ronneber/u-net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">U-Net: Convolutional Networks for Biomedical Image Segmentation</a></p>\n<ul>\n<li><a href=\"https://github.com/orobix/retina-unet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Retina blood vessel segmentation with a convolution neural network</a> - Keras implementation</li>\n<li><a href=\"https://github.com/jocicmarko/ultrasound-nerve-segmentation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deep Learning Tutorial for Kaggle Ultrasound Nerve Segmentation competition, using Keras</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://arxiv.org/abs/1508.06576\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Neural Algorithm of Artistic Style</a></p>\n<ul>\n<li><a href=\"https://github.com/titu1994/Neural-Style-Transfer\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Neural Style Transfer &#x26; Neural Doodles implemented in Keras</a> by Somshubra Majumdar</li>\n</ul>\n</li>\n<li><a href=\"https://blog.athelas.com/a-brief-history-of-cnns-in-image-segmentation-from-r-cnn-to-mask-r-cnn-34ea83205de4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Brief History of CNNs in Image Segmentation: From R-CNN to Mask R-CNN</a> by Dhruv Parthasarathy</li>\n</ul>\n<p>Another set of insights:</p>\n<ul>\n<li><a href=\"http://www.asimovinstitute.org/neural-network-zoo/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Neural Network Zoo</a> by Fjodor van Veen</li>\n<li><a href=\"http://rishy.github.io/ml/2017/01/05/how-to-train-your-dnn/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to train your Deep Neural Network</a> - how many layers, parameters, etc</li>\n</ul>\n<h2 id=\"infrastructure\"><a href=\"#infrastructure\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Infrastructure</h2>\n<p>For very small problems (e.g. MNIST, notMNIST), you can use your personal computer - even if it is a laptop and computations are on CPU.</p>\n<p>For small problems (e.g. CIFAR, the unreasonable RNN), you might be still able to use a PC, but it requires much more patience and trade-offs.</p>\n<p>For medium and larger problems, essentially the only way to go is to use a machine with a strong graphic card (GPU). For example, it took us 2 days to train a model for satellite image processing for a Kaggle competition, see our:</p>\n<ul>\n<li><a href=\"https://blog.deepsense.ai/deep-learning-for-satellite-imagery-via-image-segmentation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deep learning for satellite imagery via image segmentation</a> by Arkadiusz Nowaczyński</li>\n</ul>\n<p>On a strong CPU it would have taken weeks, see:</p>\n<ul>\n<li><a href=\"https://github.com/jcjohnson/cnn-benchmarks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Benchmarks for popular convolutional neural network models</a> by Justin Johnson</li>\n</ul>\n<p>The easiest, and the cheapest, way to use a strong GPU is to rent a remote machine on a per-hour basis. You can use Amazon (it is not only a bookstore!), here are some guides:</p>\n<ul>\n<li><a href=\"https://medium.com/@mateuszsieniawski/keras-with-gpu-on-amazon-ec2-a-step-by-step-instruction-4f90364e49ac\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Keras with GPU on Amazon EC2 – a step-by-step instruction</a> by Mateusz Sieniawski, my mentee</li>\n<li><a href=\"https://blog.keras.io/running-jupyter-notebooks-on-gpu-on-aws-a-starter-guide.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Running Jupyter notebooks on GPU on AWS: a starter guide</a> by Francois Chollet</li>\n</ul>\n<p><strong>EDIT</strong> (Dec 2017): For a hassle-free GPU support for deep learning I recommend <a href=\"https://neptune.ml/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Neptune: Machine Learning Lab</a>.</p>\n<h2 id=\"further-learning\"><a href=\"#further-learning\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Further learning</h2>\n<p>I encourage you to interact with code.\nFor example, notMNIST or CIFAR-10 can be great starting points.\nSometimes the best start is to start with someone's else code and run it, then see what happens when you modify parameters.</p>\n<p>For learning how it works, this one is a masterpiece:</p>\n<ul>\n<li><a href=\"http://cs231n.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CS231n: Convolutional Neural Networks for Visual Recognition</a> by Andrej Karpathy and the <a href=\"https://www.youtube.com/playlist?list=PLkt2uSq6rBVctENoVBg1TpCC7OQi31AlC\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lecture videos</a></li>\n</ul>\n<p>When it comes to books, there is a wonderful one, starting from introduction to mathematics and machine learning learning context (it even covers <a href=\"http://www.deeplearningbook.org/contents/prob.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">log-loss and entropy</a> in a way I like!):</p>\n<ul>\n<li><a href=\"http://www.deeplearningbook.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deep Learning, An MIT Press book</a> by Ian Goodfellow, Yoshua Bengio and Aaron Courville</li>\n</ul>\n<p>Alternatively, you can use (it may be good for an introduction with interactive materials, but I've found the style a bit long-winded):</p>\n<ul>\n<li><a href=\"http://neuralnetworksanddeeplearning.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Neural Networks and Deep Learning</a> by Michael Nielsen</li>\n</ul>\n<p><strong>EDIT</strong> (Dec 2017): For a very practical introduction to deep learning with Keras, I recommend <a href=\"https://www.manning.com/books/deep-learning-with-python\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deep Learning with Python</a> by François Chollet.</p>\n<h3 id=\"other-materials\"><a href=\"#other-materials\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Other materials</h3>\n<p>There are many applications of deep learning (it's not only image recognition!).\nI collected some introductory materials to cover its various aspects (beware: they are of various difficulty).\nDon't try to read them all - I list them for <em>inspiration</em>, not <em>intimidation</em>!</p>\n<ul>\n<li>\n<p>General</p>\n<ul>\n<li><a href=\"http://karpathy.github.io/2015/05/21/rnn-effectiveness/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Unreasonable Effectiveness of Recurrent Neural Networks</a> by Andrej Karpathy</li>\n<li><a href=\"https://blog.keras.io/how-convolutional-neural-networks-see-the-world.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How convolutional neural networks see the world - Keras Blog</a></li>\n<li><a href=\"http://blog.clarifai.com/what-convolutional-neural-networks-see-at-when-they-see-nudity/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">What convolutional neural networks look at when they see nudity – Clarifai Blog</a> (NSFW)</li>\n<li><a href=\"https://harishnarayanan.org/writing/artistic-style-transfer/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Convolutional neural networks for artistic style transfer</a> by Harish Nrayanan</li>\n<li><a href=\"https://speakerdeck.com/pmigdal/dreams-drugs-and-convnets\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dreams, Drugs and ConvNets</a> - my slides (NSFW); I am considering turning it into a longer post on machine learning vs human learning, based on common mistakes</li>\n</ul>\n</li>\n<li>\n<p>Technical</p>\n<ul>\n<li><a href=\"https://medium.com/@karpathy/yes-you-should-understand-backprop-e2f06eab496b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yes you should understand backprop</a> by Andrej Karpathy</li>\n<li><a href=\"https://medium.com/towards-data-science/transfer-learning-using-keras-d804b2e04ef8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Transfer Learning using Keras</a> by Prakash Vanapalli</li>\n<li><a href=\"https://medium.com/@devnag/generative-adversarial-networks-gans-in-50-lines-of-code-pytorch-e81b79659e3f\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Generative Adversarial Networks (GANs) in 50 lines of code (PyTorch)</a></li>\n<li><a href=\"https://github.com/rlcode/reinforcement-learning\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Minimal and Clean Reinforcement Learning Examples</a></li>\n<li><a href=\"http://sebastianruder.com/optimizing-gradient-descent/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">An overview of gradient descent optimization algorithms</a> by Sebastian Ruder</li>\n<li><a href=\"https://medium.com/slavv/picking-an-optimizer-for-style-transfer-86e7b8cba84b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Picking an optimizer for Style Transfer</a> by Slav Ivanov</li>\n<li><a href=\"https://blog.keras.io/building-autoencoders-in-keras.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Building Autoencoders in Keras</a> by Francois Chollet</li>\n<li><a href=\"http://colah.github.io/posts/2015-08-Understanding-LSTMs/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Understanding LSTM Networks</a> by Chris Olah</li>\n<li><a href=\"https://ayearofai.com/rohan-lenny-3-recurrent-neural-networks-10300100899b\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Recurrent Neural Networks &#x26; LSTMs</a> by Rohan Kapur</li>\n<li><a href=\"https://github.com/oxford-cs-deepnlp-2017/lectures\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Oxford Deep NLP 2017 course</a></li>\n</ul>\n</li>\n<li>\n<p>List of resources</p>\n<ul>\n<li><a href=\"http://ofir.io/How-to-Start-Learning-Deep-Learning/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to Start Learning Deep Learning</a> by Ofir Press</li>\n<li><a href=\"http://yerevann.com/a-guide-to-deep-learning/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">A Guide to Deep Learning by YN^2</a></li>\n</ul>\n</li>\n<li>\n<p>Staying up-to-date:</p>\n<ul>\n<li><a href=\"https://www.reddit.com/r/MachineLearning/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">r/MachineLearning</a> Reddit channel covering most of new stuff</li>\n<li><a href=\"http://distill.pub/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">distill.pub</a> - an interactive, visual, open-access journal for machine learning research, with expository articles</li>\n<li>my links at <a href=\"https://pinboard.in/u:pmigdal/t:deep-learning\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pinboard.in/u:pmigdal/t:deep-learning</a> - though, just saving, not an automatic recommendation</li>\n<li><a href=\"https://twitter.com/fastml_extra\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@fastml_extra</a> Twitter channel</li>\n<li><a href=\"http://www.gitxiv.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitXiv</a> for papers with code</li>\n<li>don't be afraid to read academic papers; some are well-written and insightful (if you own Kindle or another e-reader, I recommend <a href=\"http://dontprint.net/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Dontprint</a>)</li>\n</ul>\n</li>\n<li>Data (usually from challenges)</li>\n</ul>\n<h2 id=\"thanks\"><a href=\"#thanks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Thanks</h2>\n<p>I would like to thank <a href=\"https://kkulma.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kasia Kulma</a>, <a href=\"https://martinapugliese.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Martina Pugliese</a>, Paweł Subko, <a href=\"http://greenelephant.pl/shiny/rowery/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Monika Pawłowska</a> and <a href=\"http://kidzinski.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Łukasz Kidziński</a> for helpful feedback on the content and to <a href=\"http://goodsexlifestyle.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Sarah Martin</a> for polishing my English.</p>\n<p>If you recommend a source that helped you with your adventure with deep learning - feel invited to contact me! (<a href=\"https://twitter.com/pmigdal\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">@pmigdal</a> for short links, an email for longer remarks.)</p>\n<p>The <a href=\"http://knowyourmeme.com/photos/1244486-what-people-think-i-do-what-i-really-do\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">deep learning meme</a> is not mine - I just rewrote it from Theano to Keras (with TensorFlow backend).</p>\n<p>[^deepsense]: <a href=\"http://blog.kaggle.com/2016/01/29/noaa-right-whale-recognition-winners-interview-1st-place-deepsense-io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NOAA Right Whale Recognition, Winners' Interview</a> (1st place, Jan 2016), and a fresh one: <a href=\"https://blog.deepsense.ai/deep-learning-for-satellite-imagery-via-image-segmentation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Deep learning for satellite imagery via image segmentation</a> (4th place, Apr 2017).\n[^webcomics]: It made a few episodes of webcomics obsolete: <a href=\"https://xkcd.com/1425/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xkcd: Tasks</a> (totally, by <a href=\"https://laughingsquid.com/park-or-bird-a-national-park-and-bird-identifying-app-inspired-by-an-xkcd-comic/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Park or Bird?</a>), <a href=\"https://xkcd.com/1002/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xkcd: Game AI</a> (partially, by <a href=\"https://deepmind.com/research/alphago/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AlphaGo</a>), <a href=\"http://phdcomics.com/comics.php?n=1156\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PHD Comics: If TV Science was more like REAL Science</a> (not exactly, but still it's cool, by <a href=\"http://vllab1.ucmerced.edu/~wlai24/LapSRN/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">LapSRN</a>).\n[^trypophobia]: This January during a 5-day workshop 6 high-school students participated in a rather NSFL project - constructing a neural network for detecting trypophobia triggers, see <a href=\"https://github.com/cytadela8/trypophobia\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Trypophobia Image Detector - Browser Plugin using Deep Learning</a> GitHub repository.\n[^unreasonable]: The title alludes to <a href=\"http://www.dartmouth.edu/~matc/MathDrama/reading/Wigner.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">The Unreasonable Effectiveness of Mathematics in the Natural Sciences</a> by Eugene Wigner (1960), one of my favourite texts in philosophy of science. Along with <a href=\"https://www.physics.ohio-state.edu/~jay/880/moreisdifferent.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">More is Different</a> by PW Andreson (1972) and <a href=\"https://www.amazon.com/Genesis-Development-Scientific-Ludwik-Fleck/dp/0226253252/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Genesis and development of a scientific fact</a> (<a href=\"http://www.evolocus.com/Textbooks/Fleck1979.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">pdf here</a>) by Ludwik Fleck (1935).\n[^quantum]: If your background is in quantum information, the only thing you need to change is ℂ to ℝ. Just expect less tensor structure, but more convolutions.\n[^theano]: Is it only me, or does <em>Theano tensor dimension order</em> sound like some secret convent? Before you start searching how to join it: it is about the shape of multi-dimensional arrays: <code>(samples, channels, x, y)</code> rather than TensorFlow's <code>(samples, x, y, channels)</code>.</p>\n","date":"30 April 2017","timeToRead":17,"image":{"type":"image","mimeType":"image/png","src":"/assets/static/deep_learning_meme_keras.abab7f0.5acfc296101e82b8dca3031fb3512121.png","size":{"width":1032,"height":724},"sizes":"(max-width: 1032px) 100vw, 1032px","srcset":["/assets/static/deep_learning_meme_keras.1b91758.5acfc296101e82b8dca3031fb3512121.png 480w","/assets/static/deep_learning_meme_keras.abab7f0.5acfc296101e82b8dca3031fb3512121.png 1032w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1032 724' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-80d1332f325583ab1033b1bb94a463fb'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-80d1332f325583ab1033b1bb94a463fb)' width='1032' height='724' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAtCAYAAAAeA21aAAAACXBIWXMAAA7DAAAOwwHHb6hkAAAZJUlEQVRo3t2aB3Qb55XvJbFIIiV2EiwgSAAECBIkABIECJAA2MDeC9jFXsVOFTaJlEQVU7YkO5Ity3GJHctJXFIct%2bRls1nbsd/aOdm8l13HKZvykvO8u3EcJ3FsWU7yex%2bGomQ59sabssfn4Zx7ZubDzDdz73fL//5nNm3atImPmvj4%2bPx33u%2bvM9GWLVukbVVVFRMTE8TFxREaGkpAQAARERFERUURGRlJUFAQTqdTOlcmk7Fjxw5CQkKk/xUKBdHR0WRlZZGUlCRdFxYWhlwu/%2bgbYGPVZmZm2Lt3L/feey8XLlyQ5I477uDkyZOcO3cOrVbL6OgofX193H///SwuLvKJT3yC5eVlDh06xNmzZ6Xt7bffzvHjx6X/RkZGrjPyR9IAmzdvlralpaV0d3eTl5dHS0sLdXV11NTUcOzYMXp7e9m%2bfTu7du2iubmZ2tpaaTs8PIzVasVkMlFYWIjH46GkpESSixcv0tXVdd09PpIG%2bFMSHx//Z11nNBpRqVQf/RB4rzdsuOu7V827vyGbroy///Gm68b%2bW5PgxgP7%2bmzB13c9rn19fcX4n46/zULpD%2bumm70xfd2cm6/J5r92rG/%2bzw2wQ2kgMMnKDrUZpauCMKODeGs%2bcrMLWWoWWYVFBASF4rt1O6ExCSQYszDk5JBXUYQp34XBbsNSXITGZGRHRLQ4N1iaPCIuiKTMBEk0ZgVqQzwKXQyRilB04jjNokNpkKNOjyMhcScqbTiJqXHEpymJVkUQpxSikLFzZ4A0X3hYCBVlLprqi/HUldLZWkF9tZPmunJaG8rpba9hV2s13fUVdNSWMtjdSL5Vj02fRGOVm9qKfGrL8ygtzsFo0G0s1ibC7LUoy3pIqemjeGCSpv1LWAb3kJhXQ/XgbrKLiwmOURAhlFcZcyjq6MMz2Ef/wiyOwWEs5eWojSZiRKxGKFRsE8byzqtzWbA32MhwqbEWZWKtycBeaya/LRdbTx3V/SVUtdjJcCjRtbaRMrpESlMT5qJUHMVZ6O1J6DPUxMljpfnUKjnz%2b/o5MNfP2pFpbjw8ybHFIWn/zA17OHtygVvWDnPq4Cw3Lc9waGGIYksyRfoEhtvrOLowwux4K/umBqipKrrmAdsMRcSUdGH0DJHe0IutuYf8oSnkxR4MxXUk25yEq/RExmuwFdWjySlFa7WRaLIQYysgxmghJDaB4DglO2VxbA2JkCZPsShwVKdgKkwh3aLFXZtJz1At1R1OKruKaN1lI68%2bD%2buFL6N9EDQX3yHp3jeRj17AXJhOZk4KaalpKBOU0nwqVTxL8yMs7BticbaPQ/uHOLY8xfED4xxbGmdt5QArc/uZm%2bxncaaPLuEhxqRYXClKXMZUZkc7mRhqZq%2boOnU1xesG2LzFh5i8etI6ZlE1jGJsGaZsfI6q6QPUT89R0DuOymRHqbfiLK6nZdc4JS0dVDWL8uapJr%2bkQLh2BvF6E3HaNGI0BmSK9aydrI/H7szClJFBungAV4GNmuo8UfZa8fRVYc1VEjsjlH0a0u6/hO3Rd9Dd/BPC9j2HqmUAp/CWvFonZodRmi9RqWBxbpjlhVGOHBzjxMoky/uGOXFgN2sHpzh5ZIkji8PCMIMcnhvBLe4XFRqILU1NsiKS7YE7USiThCETUSbGrSfqrVv9UDcMoG6dJsrdiaa8jdzOYQqG9pHfNULLvkUs7moi5cloMpzoMvJp6B%2bkpb%2bTqtZ6ckoKRU4wI9NnESUkMtNJVIph3QBaHTk5uWRmZmIwGElO1kklTSkeIs2kJK/fQ9ZXwfTA22R86hKaM98n7uA3kPXeTWV3Bx2DTqwuA3qr9qoHHFwQCi6NctPxPawdnuLo4ihn1vZw/swiJ5bHOHVkittPH2BisJWQ4B3iOh%2bi5Do0ukwCI/XsjMlge6SOLf471j1g21Z/DJ2TFO09Sv3%2bw2iresluHaOwd1bE/yxV/ePk13sISdAJl86nunM3heVlIubNqDPtJFnzUNrdxGblE5MjcoGnnwhnqTR5aqpY9TwXFosFszmTtDSDpHyG00BNv4Oy4ycw3/MK%2bttewXrfq6hXv0Xiyj8SUL9GfHoaY/t30zs1KvJAojRfkkrB8uIYB%2bZ3c%2bOJ/Zy5aYGTq/Pcdvok528%2byImDQ5w6Ok5FiQt/P1/pGv/twYQp7ESpnMiEhCuyCYs3ERixPuemgIBt5PbNENM0hWX8MFULN%2bCeXGHt04/y5X/6Fp7ZBWzuCiITdVS0jVDhGWBy8SD2ag%2b1fcN0j47QODxG7sgBikbmMVW2kmh2SJPr09IochcJL/BmXZMIhWT6%2bzKp2GWmZLAM%2b/ELpK4%2bj2L5n1Gd%2bBfUB18gpOtO/FLENYVWZs6cFovQhV7kEu98mqREFvcOMSfi%2b/SJOc7dtCwUnuXk4VluPbXAbTfO48g2Xldqff0DhOIOYpIKiNUUIlPnEaV2ERytXz/PX3iAuXMcmWcP/mUjhDZMo%2bk9wJ1f%2bTrPvvTPODuGMDsLSEhOw%2bKqoqGpg%2b6RaTz9IhGdvZN7H7iHjz/8CIv3fZE7H3uKLOEB%2bsKqdRQnoK270I3FKipAeRaVQ/lM78vDXphGUGgQufWFmCdWie68mYTFrxHUcgb/ZDuGdBVtzaWU7WrGUmHBUmtdryrJKg7OjrC4Z0jE%2bx5uWJ7m3Kl5VkUSPH96mTmR3d%2bLZ7YGhhOXXCzyUyGxWpHsk7xGyBdVbT1MN/n4%2biGvHSKmfpKAol6iKgYweUY4ec9FRhcOoNYbiImLZ6vAAJs2%2b5CZkUllSRFGczb7V1Z45KH7eOjhB/jWz37C1C13kNU2iqXKs54DkrU4i8wUtWUxenKYobXdNM80UdFsR5UYJUqdnvreMkpE3U5yONFYdZgcCeS5k0SYmaludFHakIepIOOKB8Szum8fR5dmWDs2y3FR6m45OSe2E3zs5DzFBfYrTdM14BMYKpcM4F39WE2R5AkyVT5B0enXDBBfPUBSywyq0naSsgvQWpzE6kz4R8gJjopjZ/A6CPJmzYjIaFJSjUSLnKAzWsl2FZCVm0eJ8IzGvcvY2kcxFVdLk1ucGgb3lrBycpq7zp%2bha6qZpr311E9WU7rLQVWXlZ6VPqbX5hleGKe6q45KTwaVDWlUdTuom6qnedxDdolZmk%2bZKGd6vFfKA2uHRNY/OClywCy3iwR407H9REdFXrf63hDYEa4SlalQKJ5HtFh5mcpFpJCg6LR1A2wRMDehboiU9j3IRKaUJaUTqU7HN2AnASHhbPHbhn9gEMGivntLZlCI6OnDowmJSSQqMVUkFA2adBv2olo8E/OYG3tQCCN6J8%2bvTuPwLRPcf9et7J5qomvcTet0NZ59HnbtrWVkvomOpXZqxVjTHg9VvQVCeQMzB/rEf33UdJeR02jD4NZdaaji2DM9yNL%2bYY4dHOfGo/tYmR/jptV9or634efr%2b0dQNzhGvx73Qmlv7Eck5kpJcUdU6hUP8N9KXGknKWXtxKbZkJmKCFWmiZIRI06KE0lkGwEC3gbK5CKegvDbGiCNRcuTUGqMOITiRksBBkc5QyunyKjfJWD0ugFcAuVN3DJG%2b0Q1nRNFdE%2bX0LGvlvYjPXROldE3VkzH7mIaR0pwD7qpHC2jYsCNu8Utzu%2bgf%2b8AE0vDOBpzpfnkAhFOjHUzt2eA%2bT0jHDkwxZI45/jyAg3VJevuf13z5UOYPFOsuEOqApFKUQnUwruT89kZlXLNAFGWItQC1ZkKKoTyXg9II0KZiv%2bOEHz8/CV8v0MYZIuPHzu9HhAahVyhQZ%2beTUPbIAkCJWY4yhhfOYFOzBGdZpEmL6ktoPdgG10LNWKFq2gXBvj7F5/i2X95ntHVQQYWm5k51MHgUitDx4cYWRuWckKeM4%2bMnEzqR2qpHa4mtzFHmi82Vsb4WBczk70sihJ5%2bMAEh5fGRBKcED1ApSh9flcUX2%2bm/LbtECueLRTPEavvlFY/Mc1NVkEzQbKUP%2b4G/f39CQ4KYqvYehmejVjy7m8wPl5CIzAwED9xs40xHx9f6Xjze9xPHhOHJiWOdLsAP6ZYAWgSWT6wyG1nzzM9O0lOUQbWfCOpNi1pdh3pjhSiZIGEh4aJUNspEKYCeXKkAC%2bB6wqJ2h4THUm0LIKw0J0i5sOJCA8mKiIUWWToB3R7WyQwtC5Cny3b8BEgaIvvtmsG2FA0r6CI3eOTDPb30tbSTF5%2bvsTqdHS0097ZRXNTA25R13d1ddHU2s7k%2bCg5tmysdgfTUxNo1crrk5AwUGm5WPnWVuzZOThynVJpTEpSYRHH5WVlWM1mCovKKCt2i%2bRqoK21hRzRXZaUloqkp6KwsERk97zrlPIXCbmmroFmTyN2e44QO868fNrbWnG58gTqTJfAV2FRMWWlbpy5dgoL8iW%2bMjE%2b9oP5AO/qbhPiJSm9ZOTOnTsJDw%2bX9oODgyWi00tyeonMnTuDJNLSu79161Zpf9u2rX/Uh3sJzlzxAEbRLWYKNJieno7T4SAlRay4wUCWOQNbjgO7zSpaYiXZ2QI1ZmZgFtfFxMRgyszCkpV5Pf8oKpdNGN6rqE6XIvGMXtSZmpIswFc6seI6tVqNLkVPTq7X8Dmk6HRk23ORRUW8lyP46NHiH4bc8BW5yWucQuEd2VYLBQUFVFRWChAlDOxyCQBWgCOvgGxLJvGKRCqrqlEqYt%2bPW/wwFNem9yUlN8b/M8LSyxJtucIUeZPTu2mxDepsy7vOee/xxvXvnTdE5AlzlkV4V47kIRmi4fISsV4P0wnvMgrvMlusmIzpyONFWy68TqtR//mc4LuV/f9M/pKXIX8Babl585/i6j40%2bfpub3qvh22Qq1s%2biK/0Dk7sbhYZtJRQ0aBs376VoB3bSZBHECcLxl2Qydz%2bDvp2leCpc1GYl0Gp20JTVS4NOaJpscmYr1ezJoDNHTfv5ehCz9VWNEKuIdHgFI1IFnEas7SNT7WJ0mYmOj4JhUCdGnMxKTk1pNirSBVbfW7t1a3eO26rJDm7kvDYpL%2bNB3gtc/7sHCdWd4vsGSk9vJ%2bvD6HBgfhs2YQtO5V7717kE3fMsXpYgJWhOua68mjM1ZJvVNLrTmGkRMVNbUm88MgiX37kJrwcgwRddVaMha1obRVoreUkW8qQC/QYEyuXXnclJCaSrBdYQCBRd/ch3F3LFF%2bRgvYlHM37BRSeoaR7mUR9zhWG2u8qLvlL5Gpe2Szc%2bPTaNKdumBKlzPsub9t1FpJFhXLn%2bX3cdssUK0s9tHXUkGdKpTIjAU%2bJE7fNiE0TRb81iM8eq%2bahuxbxskzeaxU6C4a8ZqF8mWiwyoiMU%2bPns1kAqQDpXaC3FKalpghgE4U5v4HasZupGDpJSd9xmqfOsO%2bmB5g/9Smmjt9HiqX4b%2bMB/v5%2bzO/t5OBcp1gVGTsCA94VX5slb7BZUhnqLmdqqJaWpkJc%2bSWY0k1kGI24cnJw6iKpM4RwtDUFu1F5NbYTUrIxFrQJF69Fk1VMoMAMXrTpRY0JCQk0NDRQL8RoSBO9vpaqweMMrH6asRs%2bQ/%2bh%2bzl%2b95c5%2b8BXOX7nU6Rb3QTIlMyv3sgNx45wZHWVo0fXZXVVHB/5cOJ977i2tnb1ddsmP59NhMlUFNT2kqSOEau37brk5jXAtm3%2bAoevt5pKeTR6jVZ4RqxYwTSyjAZMCeEUJQUxWqrGYU2%2bisUT9XYyizpIdzahTs9luwBKXuX9Rf/hNYbNmkVrQy0r%2b2coy8/B0zvL3U/8b1YufInysdto238n5x96mvMPP0emrRCZtYb/4K/ze%2baZZ65VgeiyUxgmHpc8ICBQ4GQRI1v9fUlSxmBIU9JQ48BsSGKos5RhkQzHBkSTUi6ARpaR3ORYDPHBzBTHUmBWYbemXA0BZbqDrNJuTO5O1KLT3Cq8zYs21YnxuDLTuHVlL89/5Une/Lefsn%2b0h%2brGdp544ScMH3uQ1vl7qZ06z9yZh1m%2b9QuEy1OJFcnw2z%2bHH/3w3/j3n/%2baH/%2bfX/CvP/4Fv3njEr/73TtcvnyZd97xyjsfKJcuXZIM8OSTT25UAaHo9FfQ3P5DlLlFxIuVDo8IJz0lgWRtPNHREagSY7BmJrOrMZ8CZzodosuzpGSSlZqGKymGkvgwTrn1NFoTCAsPutqXew2QXTmItWoIg72MnTsCJJhtMaZyYKSb5x68l9//UqzpG69x1y0nWThxnls/%2bw1aFz5J%2b9InaZi5nfKBNdEi34BKl0WkuYLv/1o8/eU3ufy2UPjtt3nrrTf57RtvSIpdeustIZd46803P1De%2bM1vJAM8/vjjGwbwQbHwNSxPXsK9dw1FTBhbt11LhCEhwQLvB1w9DgsOJVNjIUPEsFOjoN2kYMGl5Nb6JBaq4q5DhSpRAh11Y6Kfn8aaVyXCR4ZOoDGtMp7GymL6m%2buY7e3gzKEFVpcPcuOFzzC29gVa9t9Dx%2bJ9NM2cF5XhMCMr9%2bAsqiTCVM6L//EGD79wFxf/8ZM88e0v8uKPX%2bS73/0uTzwl2uznnueZrz/Lm8IwvxXGeD/5tTCW9/fFxx7bqAIiIR15HvNXLjP%2b0AsS6SBxaaLZyTClkaaVoxEekKaNI0WuxKJ0kpNixKlX0JadyIFyOafb47l7TM/5EQMRwduvJkG10YWzcYq81v1kl7TjsmUJsQrPSeLcwf0cnhphb3cHj935MY4eWWP11gdZOPckjbMfp2HqNlERbhQlcIWVc5/DZMkjzFTKD1/9A5df/RmvibC59NqrvPXqz3nnl7/k0quvXpXL4vh3v3qdy6%2b9Jv33%2b1/9it%2b9/rokb//iF4hY4PFHH71iANEnxx5%2bDs3Tf6D%2bse8TLV%2bnoI1mO4M9nXjcRopFYivRqshTpKOOTcedqaHYpCJXG02FPpIWczh7CmWc9cThSg6%2b6i1eD3B5ZnF69lDSuUCRaLezhFEtwgC3zU9RnGXg1L5JvvHwJ3nmq89w92PfZP/pz9E0dY7J4/czvHwHi6cuMiPKoFJrIsZaxYvPv8x3v/h5XnryS3znyaf4v88%2byzceeYT/JRR6ScT1P31e/PeE2H7h8/z06ad5WXjGNz/3OWnce86L4tzL3/kOX/rsZ68lwdD2Y2i/CaZ7v4Y8Lp6YRB1DPf2c2dvIfJeLPa12xkqNVGcocaXGUW9Loc6qpFAfi1Udjk0VSqUumEV3JFMiGW681/fmAJdwf0fDJEW7likqrcGUomJXbTErYz005OXwD5%2b6yPOf/jh33f0Zls4%2byuyJizSOnWTp9KeYXr2TmSMX6NlzCm1qJtG2Ol7599/xzvde4rc/%2bFd%2bJRThlVd48wc/EPsv88b3vsdbYp%2bf/Yxfv/wyf/jpT7n8ox/x%2bkvi/O99Xxp7/SVxjcgFX/%2b7v7tmgK1xOrQv/h6FsLZS9PzhUTLCw0Rps%2bk5OlTAsR4by22ZLLRamChPpj03ng5nPE1WAWASQ8gSUqwNZTwvktH8KIEgNwyQS07tKI76CRy1w%2bSIXt9pMdDjqWKqp5mBugr%2b58MX%2bfb/eIRTt3%2bGwaULDMx/jNaxY0wfuo2%2b2Ruo6dpHddccOoOoIqHR9I5MMjU2yvju3ZLsHh4WUH43k2Nj0tY7NjYyIh2PjY4wPjp69b8JsfUeT09MUFlRsdFerz9s4l1fJebgzagiw4iMjr7qxu2VJg6P5tNWqGOyJp3%2bfAWerEgOteoYL4klRx1EtjKEKn0YffYwavQ7rxogQeB%2bc2k/GYUtZNnsaJRyXFYTFUUOip1WFga6eP7Bezh3y61C8bMM7T9N6%2bhh2keXaRmcp7x1DHtZJ7mVvSi0GX8bJLjZZ71khVd3ErlrDIMqltj4WIGXt0gfJtRV2lnc28Jol1uEgpkGl5qyjDgqLDF0uOTkqoKFF4RhF2Hg1gTjVHoNsA6E4pOtlDYN0tTsISPDgNHoTapKKgrtAvjYqXU7WDt8kP49J%2bkYX6Vt5CDlLeNUCMWr2saFjJFf00OpZzeaK0Srl3/0PpvPlv8C9n/3ueLZrusFrnVFfmwJk6FVxaHVCgygiSMrU4sxXY3ZpEGliCI%2bOpiw0B0kxoVcZ8VAv81E7fBFF7UdedA18kKdrGd8coLVI4eprasV8DeepEQ52oRodMo4MtO07NszQ//uPeQWN5DpKBeQtwh9Vj4ZOSVk5paQU1hDenYxQeGx/6Wv1T70F2VyRYLEp8VEy4gSAMjL7Xl5wMTEBCFKgoKCRZscRpQsRnRxcaJxiRZgJ0ICNF6OUJ2kQaGIJ0qEzfaAQFRqNaEhIe97s5CQUJTer0giIqU5vZyj934y0QxFhIdKx14U6X0WPz/fP/nw2wVeCXnXvfyu0OLvZqO8DPYGo/y%2b89Q1eJiaHKemppbmlhbKystpEg2KlwnuHRiit6dL%2bs5vYHiUttZmOjvb6RNjpWVluIsK6Ozuo69XuGlJMelpaQz091NYmH%2bVv/OuxAZ9nuNwMS08osnTTHdPj2iyMikpKaW7f4ihwX7pG8EMk0n6kNJLdV3j%2bDe/7yo3NDaJ%2b/UxOLJbNGn1pKWn42lpFd5WR2trC4MDvQyNjJJtzWZqehpVgvzP4wQ/qrJDgLUA0VvIomOEB4WJpm2b2I%2bWPDhOLicqMkL6PDfc%2b6muTCY1Y%2b%2bd4/8BWIkj8WzZzasAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"author":"Piotr Migdał","medium_url":"","extras":[{"text":"tweet by François Chollet (the creator of Keras) with over 140 retweets","href":"https://twitter.com/fchollet/status/858840192261644292"},{"text":"Facebook post by Kaggle with over 200 shares","href":"https://www.facebook.com/kaggle/photos/a.10150387148668464.377856.135534208463/10155346265978464/?type=3&theater"},{"text":"Hacker News front page","href":"https://news.ycombinator.com/item?id=15999578"},{"text":"reprinted to KDnuggets","href":"http://www.kdnuggets.com/2017/08/first-steps-learning-deep-learning-image-classification-keras.html"}]}},"context":{}}